%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: TableOfElements.dvi
%%CreationDate: Fri Feb 10 23:39:31 2017
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMSSBX10 CMSS10 CMSS17
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /Library/TeX/texbin/dvips -R -Poutline -o
%+ /tmp/altpdflatex.83112-1486766371/TableOfElements.ps
%+ TableOfElements.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.02.10:2339
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

/preview@version(11.88)def

userdict begin/preview-bop-level 0 def/bop-hook{/preview-bop-level
dup load dup 0 le{/isls false def/vsize 792 def/hsize 612 def}if 1
add store}bind def/eop-hook{/preview-bop-level dup load dup 0 gt{1
sub}if store}bind def end

/preview@tightpage true def (compatibility PostScript comment for dvipng<=1.5

userdict begin/bop-hook{7{currentfile token not{stop}if 65781.76 div
DVImag mul}repeat 72 add 72 2 copy gt{exch}if 4 2 roll neg 2 copy lt{exch}if
dup 0 gt{pop 0 exch}{exch dup 0 lt{pop 0}if}ifelse 720 add exch 720
add 3 1 roll 4{5 -1 roll add 4 1 roll}repeat <</PageSize[5 -1 roll
6 index sub 5 -1 roll 5 index sub]/PageOffset[7 -2 roll [1 1 dtransform
exch]{0 ge{neg}if exch}forall]>>setpagedevice//bop-hook exec}bind def
end

userdict (some extra code to avoid dvipng>=1.6 unknown special: 7{currentfile token not{stop}if 65781.76 div }))
pop

userdict begin/bop-hook{preview-bop-level 0 le{7{currentfile token
not{stop}if 65781.76 div DVImag mul}repeat 72 add 72 2 copy gt{exch}if
4 2 roll neg 2 copy lt{exch}if dup 0 gt{pop 0 exch}{exch dup 0 lt{pop
0}if}ifelse 720 add exch 720 add 3 1 roll 4{5 -1 roll add 4 1 roll}repeat
<</PageSize[5 -1 roll 6 index sub 5 -1 roll 5 index sub]/PageOffset[7
-2 roll [1 1 dtransform exch]{0 ge{neg}if exch}forall]>>setpagedevice}if//bop-hook
exec}bind def end
 
@fedspecial end
%%BeginFont: CMSSBX10
%!PS-AdobeFont-1.0: CMSSBX10 003.002
%%Title: CMSSBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSSBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSSBX10 known{/CMSSBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000806 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSSBX10 def
/FontBBox {-71 -250 1099 780 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSSBX10.) readonly def
/FullName (CMSSBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2919BE7F4437ED75BF2F7BA7
02F85142A4EADC8C9C7F11ABE2AE2A9DEA79CBF9577DD8627E31D25A7E4DED9E
FBB1C413696C88A07E5C937451D40A9211B29E24C9424635CD4FD6B16FA7D76F
5BA1DF0EC26097EEADD70EAA577531177A26B5017A32675C68052E90E68538DD
E779AB23150FCD1653460CDDCC713599EFA381C3322175809A73447720F6911C
6BFBDC0458C477D2CE69BBAFD05B5C2DA1D2E3E8378A2112066B045243D3D080
DAB211DCC25430973C18E7FC5574A814E3EB79F34FF5197453873C8AC66E47AB
5EA57CB3C8365D5235E7746C8584734F002E9A28C38B0C25E3753D85A1D2F3CA
B8DECFE14A7AFBFB76CF3E91A1E0203FBC8052C2DF967693C9BA0ABE86B5D264
BC345D7954C9523B3E70C4AEBBB0F2D56BAD6D76E095F9390FBE2CD607F3060D
F713ABF47F0FCA5D5C27CBCD4140C668F733F769FF5326917C0AC5D4C72F99BC
5AF4540DB169622644D320872947BCF1D30DA4EA150AA22D6D53777345858DFA
3286EB68314E30EC650C8BCC572D72879E431FB4297AAD6533C8F4802E0B9902
8360C57504D4176C1DE7F57382FF2E2C0A3D5285A061CE91D3149E3096B91076
1E914125CCA8D1C9230B72427990ED4468CE79C11E8F0CB89A3213C535B040E4
0C5784E6D53C96696EE45C87B5E0DAA80D3A06E5759D0676ACF99020DCFC3E8B
50002675B01959500133BC30223C75A54948DD28FA83F399924D4ACBE33F1F2E
D85095A76AF6DD92EAD139A8D5673A35B3633D25EF3B10A40A7E28F329D6E7AD
DBF1DAD1E666931611FB107D1FD3576F11A22B50943C536DC2BA477EBAA52BDB
B65A98268602F26DCA5EC761526CB7F33CB5B345110B7A90E1D078A21E332F78
33A0CF88EBB2CE852384DE3435F7B3564A0AFBB2024F79A633BA5B6EB7CC5389
C43621C82972D60F7DAC71FD9DD38CAAB865D7DE4ABC39D71879BF31549DE649
4B9CD8C149880504E5B34C2153E963B3FEEDA0D59F70E0ADCD24EDBBB8EA961A
90E5AE4ABB26E1AB1757E25572622D5A2541CFFACAB673665C7693855473D78B
847FAD590B657CC0B8289034AFEC3C54FE97B010535F70AF67ECC88E21B077D3
A9C2C52D25CE9714EE430735DB57991AEC946C96B6988B2C85D17C8BC80EA844
3A076618A686040ABCAC347F1B1C14676B05E13C239E99C3A2B63D0388CB50F2
BC119D6F74F70DD96BB5343D5458950070576BD6E319AAF5792EBB9DA5778CA2
58DE0976AEB766DA6A865F09FD6753FB4E7E0E9A06AA1A06C2636AFACF787460
9E73BAFC4A56A99277DCB14F52555EBF6DC5E5785EF7745521FA061227B725B0
7A5BA223D5EE9239A7A1694D4F9EC1132FA23DA44ED0FB0AFD8987A01F9FAE15
ABD485BE098CA7B1AC780A9A02AC58DCF0425D4D110226DC7B5982FE31BB78A1
C0AAF9B712E8D478FC4F85400B5E6D71AA653F9BB2E967A76D02B04887CEB9F0
0EF50A956AF7F790400EBBC07467D9A8BF8BFE8200F8F7EEB5DF3E62A9A332B4
513120FD9F8A93ED683CC47551C629B5313E4E20A207845CC37491ECC3945EE2
71A0C5633B353B03B1A7727D5D9A0478D20D67A981F6E5CD8737548ED4348A91
82F2CE805724A028E346E6B7C542FC69CFC7935E6CF3320ED9701C6127FBDFD3
B20F0DC2D1F92DC69E4FEE57B457E82D5721D932B140CD6DB9BC86B961E7E6A7
5816F42AF937D97C3149DC2AB0054564592448D0CF52427B766FD38E3B040B81
59AA9030CE06A9A9E3A0572A11BDA85531060B75DF8791176CDEC0A9BBF472EE
BD433BCDAB926689B8806CC8044D0925814C1784A41CEA48ABB9AC039485BFA3
026FD30CCE84AC57DF09B1581ED01B3A840AC5E9208465BC160238EECC7A6753
D5B65B159FB08E0DFE4C9F2EF5986352C0E0C4DCA0EE62EE5C19BB6C486FCADE
99D3519723B70B20FACE685ED8D364905EA64A15981B00A6DC06D7B0E3D38FC0
9DDF04221696F7A8F3CC7FDBC25A61D9AAF9F65D3A64BCAC4084CF13BBED7195
6BA4C2445676804C333DA6569E4AB7E6999505DD1988C3E62495DF61B722A6E3
00ECC4EC698E33F7B8225FF591B746E449D2D178880741074D0C3CA740312D21
1F8B0B1A855FCA081AF1E69D14C9131B1769943EA6D5D6210E10BBD9E404B445
FC3E2ADF8C9AB6AC07BC2FC0482515625523C04303F7884283D5CC35A4A6ADAF
59738F3DDDFB51E7134327AC4CA577BAB076F3B588FA3828971FE9D561F46358
24BEC4C7F84D8FFEEAC94E2C632AFA5AED635E867AD362E373CEA718C750B4B6
954A7CB6E4CB2614A4E1C707412B7B09F8969EBD5B6510B66818A2F5AE4EFEE5
9DD7690A3520C477DECB7D61FBE5F84D1C655971FAD7CDA78E695C18908016CA
48B468BB6B43EBE1DDBC49F43B7CD667B4131D7B0C9BB048178A31D0CB70A76F
527DD352F7A9F0F35226117FF305A9DF4AEDF474FCD5C7F31FB06D4B2CC40629
1BE1F40B6347201F84BF35CB5155BC4D2E1DF2A5C7613C27A0EE77BE55A744B6
DF7DA5741AB55F133D518660751B0A91E6BE43B527E9C97E2F06FBEB58DD0215
BF4105DAE1B2A29DB05FA204D0EA6E574C7344C3B3F44092F7F997654D61EA9D
4C811CE6087BA1615A31F8D107DC64F1CFF707234135B728EAA0ABB475E678D8
9200950F24A8A61AE6AA18F34A067849825FB3925A8E01D64E849546FF7F4418
19C0FFC2EEEEBDC7805612F7849BBA7BBD954BFDAF2E6FFE3CA520B79070F8E6
B1509EE0040714C9F5023816250F40FD1C6867F77FC8ADD3A16A3A6275CD6F5A
21BC03274B350EEFA6EE929AE91DEB8D8B309E3B3524807B4562C7758794A8C8
4E3C6EE0C0859AC9B799428EAC242BC4AD9564F2444E3C79F11D4C1D5672DCF3
2E191E25165C77EEA2DB51753ADE07F5E7E748704000265649A2E1DF68909F38
68F0D5F415330C9537A065728D2104C34CE05458AC1B2A53946890DFDD67563A
E044E7AEDA111FCBF431546D410D67602985F6E13988999E46C80A983C7F12A9
FB56C6735454F1E194F63A1B6B21683A281AC6164B3229AE25B1189366C9DDB4
09D1BBC8429AC3D64F8BBFEF1265611E7C2FE1D3A2FE24FBF3ED96A5CBA6FCA7
847F5E3AD4D14C0C77C225588FBD0DA2E960FA3901DA1B46B796121DC804FE82
C382F75AA0495312A80EF9350CE0F80CE0D18316E5D02B7BD78667C2DAABD879
E17D5EB8F274DD2B1BFBC04EA2F72EE5376D01DAA129FE257162BD19D19B13CB
C13181E6DBC12826AFFD87AB152A59D67D0FBBE5D9CADDB1CAA8C27689355AA8
FDC556015E4A9708995E51E46D6D1ED7B68A61625561FB594B9BEF87A1720222
64E4F8A47637705CA32B1B4CA5B8473F1D67FCB7E4041502B7ADA9FA4B16CC6D
282FB636979D3DE7C76F3000ECA08AD6E116B1558FADCA251D67FDEB4607CD3A
84BCA7DF488C97FAA4FC195661D7977A08EF04A7D9A2D619EFC7AE291D7DA633
C6DBCA7DA01EF336E378764F6B4E4D6C517BE05F10BD1FCDB20E5ABA7F65A8FF
17D93CDF1E60787712C40775A5C3808AD05A2F276C94B05E10C6042604F592C8
AF1F25B98A0C78AA7BE1DE9ACF2273965F0795B0D79ED6CE2753FD0FD7B41A18
FB490B06B5467561DFE5161C27F58E48EA5F38A5477C9CD0C2FA13683271E55D
8B08DA0C96BDE97C653B0B18096EE7C0E6BC3894057F14E83A902FAAA4C2AC7A
566A9EB8F9D622476DD4E722F55F28230124F67501866FFE952AE93DF5BBE2D9
4B9CB9955320A9E256E611EA3838ACD9073107936226140ABEE92A096659764C
4ED2485B33E75BEA57CCF19AB9409B684EB14103ABF6811E7A8C0AE0C0C11BBD
87801F3F0260D04A8921FB9EBDA2A2048F4B5C47DF63051A0BA6DDBBD895E0B5
F9F0F3CE62CB118B86AF595F4F34359DABD9EA354798E8561599CB32345A43B5
93B217C43E316BD10BCE1C66A10C9A8041A14570ED7FFDD95AAA76E92EF52042
69F0B8FBE21CA4E37647DDC890D13AF489606195900063DB0CB8D71968C1311A
D56155D2B2382119E603AA85E9ACF1785E4C0ECA137E7E4F5EE7915E8A080509
02FFCD2494DA2D3B2AD27DE5F11684BFFA2366B6C834AE309D8E07F98B7B556C
DF3E0B42559610F1B78C79254AEBD7B0F5B3D7F420BA725AAA91EA20D014334E
8FE221BB02BE7B59FC3D03D8ECBAE21F5E37E4A0352C475F9F29C5D2FCE8CB9F
2A059AC06AD9E6F13C39F2781D7D4B3FC34291D165E5C66C5D01B5AAA2AE8F72
9B3C634FB38FCF35283792048BACA9F7EE6789621D9243B917234405BF194BF5
A4F137680ED10F216076AA2767C1D220AE71EA7393C7E252209B6ABD94213AE9
F61FD2CB3160F41C4328DB8563483E13EEBA83A7935E4AC11A97DB7988585184
6BD3DBB8241EFA1F1DC5CA9C2E16EC1EE12CAF4471FA83605DA85672B34B1F9F
8CDBAB6907D6CAB6DD7E00A7D636EA20961BAC97D1AAF32C8096003E096855B0
EF4845013B9243A29BD509436CA78C6F8DF4F90DDED960A0D12BFDBFCEA539AD
BD4BF883E09542C9D75DCB8A4AE82DB495B0B918D330979F347A76D73B19995F
4039557D337FB55B8C5922F35B354F6C8E4D861A0B66B3D803C9862C9C507404
5EE039245AEDB521E90F83F15E44F42F0802F8DAD6A9BF6176C364286601FC80
E14926FA518CC035337904132AEAB9785361709CA01AB0F352317294B34B2B20
FF88CFBCC8E89863BFA2D3ABB2A596C9D9DEB261CFE48E403F88652150EEDF05
3390F002B2E4B53446FB39C488E3D0D4EF4AE2AD19019710FDE56FE29B58B00F
0A6D5B26B814BF64F13C35EE903FA2190F460F9438924E1D7158704F305E326D
66CB529B3A4836DB0FE383EF989C975A2F603332FFE0748E0D695327CC8D9AB6
E036E0E6409261C30B80977BCC3CFF8FF8A9BCBB889ABE47B0CE3450783E1EC7
1C030CC18E074E01605908C3FB61B78CF4FDCC8E8CB13EB77CE6FF2BFF91D658
51FB05DEDBB20B0E4C5604AE3CE6D41A4C8D71A1F90120B1F90C83989B892253
31D06ABB335DE237CD0CDC91256A54797CBA5E284B6CEA6FAE01F7BEFD905E5E
139D57E163137B5751A765B46A3AE6F653FF2551988CE792011E0548CFAA6ADC
E32B876763AF6F6FD6864E7B55E341C97FFA711913F8A7FBCC1FDCB4CF2F4D3F
17358EBCED45C975F2EFF3FB9F77A22EEE4C9DDE63360DCB2DA2C1AA4BE44BA9
3F9CE6F27631809DBC45643DF7BEFE247E79AA7937C409986500EC1026ABFDB2
6C30E0A4852A6976A73AD7483C36F1717460327BBC05DE729E23D370B78630D1
7E87C99A5C3A3C0FFE204EA81A8A33D7DE80DF3C0EAB557F4E86DDF8E03AD072
61B1D8E1BA05452A6FCA404D9BB8FE9831A367B0AB31041B474DA9536035E7B5
EC83DEF0AE17DCE958DA19869DD51F53D4A4BFCF7CFA635D6F9F882E6F0215A7
0494E76F258D44FF72EB5A1104E8F73AD2F6F2ED337D854B81DF4083E6A2D679
6B5613D76DA2347118CF009E8A88924C2A42B154DF1CEFC93C89DE0ED8DB26CD
8C2EDE2670F494DC591E79DA26CF8B5FB76613296FB1F39AF2001BBDAAB12CF4
3906B4C304CCF1D066524DCF92FF484CC682C2B197CD797056555F318279C3A3
7AD8EA9CB19724AF57EFC6706157A5E2F51F104F6232F252594510E0E4BC872D
D610F4C99BC3ECB668139331216DF1AA8F6358EB90CE1F0B8267B878B19BA7E6
77A53A674E0B029E9142865CB92A1596D5AB97FA12FD05A04369AA00BDCBC2DD
1AECE1A4AD55A93885C626004B41FD277AAE6DF68161F7443EFA7D9C913AF909
970F4C6292A694AF033B953CE37116A2AF2439E482867EE9EE2BFE1093A738DE
24D3C408DD105CE6D7B8967994F7C5CE49FBF61AF135F8F7799E2FEF29A168CD
B2F16F795FB475204FBC41AB78AF87E4E80F992FDCB770A3DC0501AE1D786ED0
449956A1BDC93876934331C24CFE4392AA860A1ACCA39978BA8AB90A2174F5F4
97539772660D3920E1B57E9E0674CD34C9EDA83B6AF1B06B26207FE5D67E75DB
B170F1D01D512CF6D586DABFCA32404253F0A9985A29D46641A81D5A810469C2
8081D7774B3188423822003AEB638F21661E0BA7AAC765CF8321F9677C85A562
88AB1320B3256EA9FE0C67E5B69A5127DC1B13E4062CD0C9ED10AB36CD370105
8FA04F89E3F836B01393F1E9365077A30D8E46B67400DDE8EB0AF8C815729699
469773FC3F0ABCEF752A5768C9DAA1931421214E69053775A238553AB6620E9C
E875223681E60B7F7B25BEFBECDD4FF799ADF34BFB397AA114515E2133304A57
B422E97EB3FC5314F64BAADDFEF9C0EC719A78915B26E7E3F381435563F650EB
7587F11CA3B14875F6B1D817C1EFA0B89C85B888E8391C74D77CBCC6A990C36B
1062D049E20876B40CB030367818A3CD3E2CC354CDCC9A0FBB8DFCF7135FB2E6
A0BB0C3A441CEB8D5FE849AC7299431DEE27CE28B33AB7E836D6958104D1777F
8010546687CCA23DB48E53376A446136F449A92C07102315D4D0A897521313ED
1A3A8456A70C16EAA50A3E67336DC89FEC56AB54A579EF264377A103939D5EE0
0A90B4F20AE1F2511469C34B5984A04D5AB8A162F18DBE4D613BA1C1C85E994F
80AFE3C18A045148018045C63376CDEEFAC53A55DA67D5980E3A99CC1C981FC5
5C25CD0A685E3AA6F8C0B8FAAE157DB91AAA50A2B5F7D8860624F29B8DD87606
C30F84C33D802DD5B95E090BD7AA4400E090DC1913BBC392D7E5E87717AB14C8
A031737560F3D132BAAC0D6DD88C586322804BC2D8C505973F015F7662571FD1
C89CA0281CD48AD84B9ED8D70D240A4EFC2715DBE98E545B987AB64FA259D81F
3F768326717675A3A2E22F4EEEA22A5201797C6D5EC644318CDA28A2C3CCD123
B0159205FD52E1F9A60A69AF7B40C4F7189FDED20EAC3869E5F53F4955CDA0C3
2B06D72EA2B8CA5F0B557E9A36B8E9BE7EEEF96B5EDCA6F79F53F83234B2BD45
6B3D631B1C9CBF7D283F377177C60B3D65ADD945D31458164043A17B8DAC8409
B4261A4A0EB36E18BD104A8E66F45C3AECC07F4E8FA9F3D2A27334F95AB79BF8
06C18D57EA745116DE0B36C12B6F5411A9805218B5A31731CA0A35D9AB6BF5AD
928726A6EA61E0B69FF0F4FDAB2CF5B222FBF9BDF4F89EE47373AA3944678328
1EB230EACCEFF4243D6B4F8797482DAB78C1A053F2800144A4C76BB839E536EA
2D4DCEB625DC0F754EED8BE3FA53A7AC3ED17C92757CCCCDCBE21A9D733291E3
61235172F117D4B8305B45D7728DBB2D71411954EE599B0EE786D7603D61CABA
AB241062BE3776FA150680F9CB8784FC7A94790FBD2922772EE886254B59D0C7
4A4DF7A2C1C4ADA1DBC51CE27D3FFF7F96BC5FF7382864369536BEB2EBA6DE2C
1C427990F6BC84E92CF718BC6D4CE9EC1F2DDEB8637AB1FD673C5BCE1A090146
171717B39B9A83F2DE0B79CB1B836390828B3EB6DC397AADE45B21F55D1A3583
C3A5BA93A4ACC08CCA4DB80B78AEA6002D80C5513A705E7232938D8423FFC72E
1B96313ADB255D43E2676DD2B00B51D116A328164BDA8475741EC234EE6581DE
06162F006405D6D823DC47DDD14536BB530D132975C0C436F08F9243F1A9AD16
898823B8E2739B4428E62CE0E41C291152E913CDEC375A4840F8BD0B8E497C52
5713A4FAE45EAF59D6FEBE33A9FCBB35112FA3C6D71965ABFFB6F13DB77EDAE9
C7FCA9F7EA5AB73C1DF0D263436840DBA4375895469AFF5DB218AE2CA8EEF4B6
B5E353E033483DCA18801DAA5764195295C87793D5F78FF22EDE240535D6E3DF
5E4640BC1D08E083BA4D822D74C1473FEBC4F187E9BCE3612AC5B63E40D01916
ACDA40E27990D9B68D3CC0FD2749372883A262140C4E6714F5D76BB22A736B31
1E9FDAD71AC751B80C6D25673D893C0D2F96C1AB2C7AFBFD69EB36665C7E12F2
9EC4BB7918E2FA15FD01A791C75C468626EE4A639E0F2D06C7F9A6A998893672
C3DEF7A793D7B900603429BFD0834060B0F28F22748970C04AE23F13661E51A0
56AC1DCD83087C2DB81B7BD72C2AEE6359841860CBA2ADAA58795978A5D8AD09
583B8F0709B446410A786D89085918BCD970E48968ACBE536647A31BD8377C36
E61A49D11A91E77A8626A29B22DC5A3409FF6CC8F3C38638084F8F4F7DA8B4AE
EED924173CA5279EA02F6C2264246F26F712019D01D821B6ACDF4E2742B7E7CF
14CEAD71F08B14ED63E0D8BCA078A44A5B3EC077745473FC15AEFD6D7E5C3857
020F07F7B00FEDAE23BDBC758D8C67E58C12147DA807810312C06713C2C997F0
0B5CE164677EB1961EA2C77DC0E3824FDB963A291228175917C794D123DFEA93
904A72A20A1F7C99847784206563BCB0B7F990AD13B58D626F2552A89F1FD8A4
BF8FDE83419824E7B7BF0AC1F911CC39D22D58C0C3E1A010DBEFAE6DA498AC65
AAEC763714540D0CBA13BDA85FB53F7804D53D17DDDC5200023BCFD0E4EFAD64
92D8DFDDEFABAC2437C9D67FD30D49512A432C31992C21F9B33A9BAF2D7402FB
5A4F056C5D311156F27255E2D8E276C4024A2D07C6ECA9BD0C66283F80263006
9B221ABEA1058D96284C8F79E81E15AE1A5A2B6B526F518231408E6DF06D69FA
3BC7DD76B7B18C77393D612B84BDAF3E145CCBC23BE30A89B9CA02A550F86CEF
7061DEA3C7C9EF63F3AFA305A72C3C166F6DD694EBE3496FB5B61F1EDA8C120D
712335C55B487B788DFD9DA91DD4D70752D9AD47D2F25BD723CB54A68B927731
671F70ADB75EE6D72E281C5F3F75B9958C506B436AB5DD5E0AA686CBABCBE2B5
0690B77B676EF83301F9FBDB499CAFCA1474EDEAD68B5EF5EA532AA886EC057F
9DE5FEE90059C440A641227A306C368FAC72066651D09670893F5C6F85C7E009
3C9FD0F7F436361AA35C49AC577CE9EEF644B57F0BA07EAB779883D41236BFE8
C7519F2C8F3945E3A4255E01B463EDE7CF002A157EBD8BB1A67B5C370B3B1FE6
FEE3C9153EFC5206335DBC5048E8387EE4B882BBBE41E084839F495F774E8A07
A268D0633C0947FCF0BDBA0FCF6C1D59E354FA85E4A5529E33C6F252E17F1A06
8152BCD1D43B8863196D0AB7178F4384CBB85D9B32A7133A0F0A58A1015F3D59
B851DA60371E9FAA7EB0BA9D6FB990378BCE9B18E838A2A8E96233A7FF9097F4
84CBC4CF0A48F7C5A6AF1DDF2FB66FE0DD43CDD5C4E2B447412F3D2ED64624AC
FBB1E764BF791DF597AF17DB3425ADF6DA99E69343D000169CAD848FD41E9918
2FB7CAA9D3AAC4E6DA8D6A4835DFC3B7801B19F8598D3596340F5EE325B3F772
8759E047E04C2620ADC3A81798CA955B931421031586C91A25DBECA5D9CE5321
42E3041694BBAE932F16997AB79593B479A0B7397B137214347AD884A6764B7C
286FE8343493386CD41EF9112E3B2C6AF8D198D0E6DB169A9187751B540D735B
ED02CFE724BEE293F71DC9252DC502A9D84F38DF61144463F7F8F5F7726E25C9
3A56ECC8508B8FDC1999259B315AEC79ABF1864576F2BE45DA3697542D6743B1
63B8F2AB567E0BA35291B85E10EF5F52606F280956AAFA0D1FEB3815E70249CC
2DD3B1372F5F925F876C5E14F05B3C7F679E0C1D650FB279529087E3958B35BB
29DC066140C04FB3DA4B73CC907C61CD4855139F79E30E4694A7098422EC01B8
8629BE2F6156F171ED5A0D230049C446705DC2CF7C0C82A37056CAB377F109AC
EACC704FAA5A18D954D3888ABE9590B2FD389831F07C7D2261356730DD14C5B9
075FD784B84A603A4929DF89B66D1BCA8D90721BEFE0EFDA138AFCAE872F7F25
BDFBEBE505C4EFFEFC236F5EAADEABD6E570F2E70B0FBAC2C24B16126E549EDB
F91BFDAD90D1CB01218493B230FB23DE20F61F3490DC26C755ACFDFB1317BE99
53708ECE03696933CD1FD03456172FDDBDC4E5FB402386918873B9C3C841FEBB
D677C64D12C961640D9EF57EAEBD7C6ED86472C955EA37E09C3883C2C3836150
F3BE41D3216E27F0FC9DEA2B43AA5403EAC29FC22C5E8CF005E4ED602F390CC9
A81166C8F49BD8699767523745E3F235A2AA72817971DF8E9CAC1BF0A23F3D86
19C41B8754A6933FE084B12C464A215B941D4AD023433EC7B113D26AD8B719B8
EB41289CEDC015445893B5F5B7A598CB739855BB4CA503F0B478C8044F3C53E9
85CB00B0FC056980069887F49CDD69996C0C3A6AE790518946A68D21653D791B
714F289C163E4458422B18E71A378040343B1E3FA2365C9EB64FFE3E499FADBA
C21DB0ACE31C03F6CEFD4D83E1DEBB32F97BD89CC188E6AA752B3C1A9BFC94AF
711BB76691B7F3F31D5EFF210CFD35556EA417D6E2A50F88FA78FAD25F7CA1A7
BE3937C9178FE34E222A2D9ABBA798E5F77B8B1902843E4045B80B836CA30354
141284FC15CDB13F36A282D8654CF1307B3B14328CE47E27E846BB54663F8A92
FCECB31D60F2E426B696B904A76A15D0927AD78A61FE131160443E63DBBE0487
367E7551D246B94BD7157327B85110E7319483B970A7FCE60B2F77B314F65C70
15FBA1D37B243E5E1D6B265C4426785042123F5784B6C2A447C8BE115D4EC8A4
07F5036E0B261CDD9BD29EEA18976C9DD109C51E23478BABD635DC458354847F
315D59E8B8EF7B8D6C4DC9ED4DD6CA8A4CC8F822A048EE53F22E353EB4F942FD
4E5BCCF4CE7C690E5106A6BBF41CC588633AC1B1228F91FCCFDDC58161106372
805BCE857BF3F7AA285F96A7C53A1FD4DC5CD7F72073F0A39923C8F91114DB16
E0EFE7B9EA743E4721114B9CDF03235CC9DCB624C4CADA62C508C4EB7E371AAB
DE08D99C463A6870BEFBC6638345946F50B1E31EC4BF75CB9EA773E6BF8F61F4
E02917B7439B39D5E0A1A4BF6B682996D95B89C5C1CEE184FF98A967492E9C24
A9BF9A1E9C0A9105AB9B1CC511D1D382E9F7BC5BC2F9AFBCC6DB4B694BC15BFC
86FE3586DF043AA6A824ED7EB20E0F41A119483ACD05F6F1D141C4861DF825AA
1DCC9B8B51087D5850CAB156C864312D31AB4C11C56F1D1EC252F26F3B44DF38
93C594EEDCAAA176C4CDE0482D057EE8DED721B785765F9527FC54775A9D35DA
0BEB5E961B86D68C256A4A41011C9B3EDE705FB796EB0E7D4A8A363B08A00E00
FC09AC575E424FC7191B0E93A21715B2C14C535749252FE563AE0B1CF6BC3BBB
1CBCB66BBEADE27DE4A35EFA013C415CB9AB760646816337E0708689A325BB18
A2602B1F015C7400C5ACA11543C5A938BBD76E4BE767579C0B3434D49103BEE0
9C8C54913F3AAB53BC71BB3E64BEC34EA55B1B97569EB35EA487F7D0883263C2
C2BC743BFBF6DB6C58AF8D1ED81A6F469496B2AB477F145A62CBFBE8B79E17A3
B348CF41E3866574AE690FB903E9DA1DBA5AA96CB98E330AD2F40FA7788B9400
FE62D1CB5D56C2DB17B898FFB9D248A7704418A4A802B852FC1259BE929A8A29
E0027B31ABF9D78C3DC5436F97CB027C955D4BE69E2EA7FCA0AF3220C74DB027
ABB37CEA8EF425D3D8CC63CCC05CCE28DB33DAA5F3B5DA5B36DB0B6D81523AC2
C38D13CCF891CB2D55E403B1815C77B77056AF5DF96AC068CB4BF5F4EC7B6E65
94B4540100ED474EA1836FF8A2DA1B4243C5E715428431212937B52A11954A21
977992FF20D7498856DF31C4692FA579E01E0D8533D97716C7B952DB20D0BBA1
AA49E7801A48D54B8EA3EE0D44566C1ADAACDB589FBB7745F49F0378CCA911DE
A68E2FAFFE1C48684614043FFA8A8ED4C1C44268282FE678D27F7BFCD45A5E17
6BB75EBCE96359308606059C2B6271FD73644242720C85B6C4B2F440D5B64DD2
B0CD7735F0A010B6B4D3C83A89CDE54E7970B0B181D1A3159A4A11EDE1E7FB25
E8B82927ACF3D8FD645104ED09B6678CC4AE6DDDD5BEA3D36DA756A137C9198D
C6CA3ED8469322D05F6CCA4884857CD0F47B9040AD6D93AED9B1FA6EF3E3F15B
D6C70780594295CB07924D274CE3CF8764FDEFC90025E0EDAE763C35DE017C14
7B9E1A821479EB721E28B144AF11C9B633AB71DE72FE9487F7C5D33AB13E030D
999DF5F15DD13283241C1E6DF2A3B6B194086DD981777128E3DD0954ABF98854
00E5A54A6280D298F84F2FA6118A56D0ECE46CD753861B0160817288A83DC30E
C52042DEFD6198385CD9A1CEE23F409A70C89B3F96AE2AF2C5DBDA0FDFD2DBFD
296B8FB21D0C1E60F90ECD698A7A73F27E286B10367142AC306CF45BE74EB7A6
1E84EDA302683B67FE5FEB0E7AD578A0E3E8663B5ED10C5EEC02F697EB0DAC8F
79F2CDAF18F786A7836FBF3ED3CC7F78468EC02E154334CB81E2518C2C6E663B
B2536A4441A23D6AC4B02AD25C2D747626304C39501B8CAE488343C92356C6E8
804E6A418F9E095C70DF9DEFE8EBF4EEBFF84BB04EDF0AE5D715E3E67FDB9603
6D57137CF196D99DD757464C65E3E60A229A0A20C72DDFFB4D3B12EB57D2B021
8221B9D87AB8EABDB71F5461AD8D116CB69CAF97896E1F1403AC2993B7BDEB7F
438ECF4FB2B2DC9693059C24DD75C7A4F0382D5D84B7DEE830C6473144EC6BFD
6B300E98D6D782E888433B117AE4879A99B7AF6357F30B2F997288D02F3DCA73
8F935348927D7FA73E14EDE8EB66EC7FD40D20D5733ED8365E56CD1E18E3AF8F
5DDB19AEE76BCC5F27696A4A0724ECB888D074EB8F4BD9023EB4779B8E2B3F67
9B65BAF367DB153561A038871995175EB73FD4A1F80E401431347EA04AE162BA
CD3F5EAA79D4A51BE6A38435C9FADAF70980067CBC1974F19B95676041F4F061
6F4307A9D6C9C6222B90717853B47DD59CC846F8378F1487E5A8EF6666FE20C0
FF1181E18CF0062C9255429E8B78D93E658FF241231142E1F8696706566D9EB4
255409B49620583935FC062129762BC07C48533C4AAE1B4A1D4D782CA0ABA987
B9F551C4E1F5C3353266613D08488290CD2C2349C9FD5B4FD214530DB222193E
D4350C638B56417A819E7F9A2D0E96C468EB18FEA0136DD1BE6CEA4770892942
64E477873535FE9C51C003E77B483382BF77361A01E1751D21A7721E84F60E1C
FCDE3E09087D8F547120C4D114C47CFCFAB8562645E8A26419A6C0D15B1F9EA5
6B7B4D985BC2AFA4A92FF78231CA778E7B63DEAFE3CD5389A61582DAEA51BDAD
CA22E0EA66F12829CC670224DEBE7C3CF6DAC7A8DE65BC25739E4BCA70994383
BA91940BF05227D1D5AF802C883E55CAEB556034188EED43557CDE446F1E208B
589CA809DBBA0D71EC993856C0FC811568D3EBF2CA934A0AE62B6AECE788621D
C0943643FBAFD254023A497029B004767FA23235A6C5D21FF04EF86FF61693FA
F103AA038C84B29850C49393A3903094A0F12B4CB95B9321B95D0B84F0558C9C
7A1711EDB0E8E79AE88DE234B08D80299C757C32675D2109F95908FBDD23D438
1C4764ED61A60FC0E771B96F502481BE0FA7FD4109FD7B7FC2F95D27D46C76BA
818854F3F88D6A4E7E6454C7D49477C1BDEB5303E46E6676A5ADFE297843A9B1
82E54B8A78248D7ECF9F86134284DD01F4B9C62468CB3658E614E61FD879F7AB
DF855AF50E04222A31B306FBCBD4103A3ED61D36B86B5B7CB1FDECFE7A327D90
A2A7D02B083E519CCF7A196F4D1AE9201137095F2DBB6AE4D8AB5F9BD1CB5BB7
91862B3FD1BCEE300A972D45AE12587EF5CAA1EB20770893119A596E09430EB9
96836B371339A690AEAD9D5057BEFE218A2E73407547F6240139FE1463336C5B
12FBB8B8F479D7CC77E9D1B4064C2AE70C2ABB66ECFDB5E13F7B403546EC0256
B83D811734BDCD066B4B68635D9236870EF0A39A3A8690E70A693FF66A0DF4ED
5065B75DCB34FEC581E54A2EE69DF2CF22AEF8AD907E4E21C6A915E9E9081987
897F5DF05B4BDE8188AAB103308D020A6D181E32379E2CF21C437B61FC82423B
F2CE0376F3610F0A7AE2A8D0F9F0BF3A0046F57A6D2E235CEE75F53C6792DC59
36D8039A5CFCB7228F242D134203E363241782EBCADF9D2463F272D88E2A5F35
1E3796336A4EA0F2BE8692A7DCCD04A3C49868BCC1B21A1508D2A9E39F6AF971
F68C44972567FE8C7EECC4F5F64AE2E9F2BD5B5E85855D72F7564CBC8BAC829D
40ACCC5503C4B78E5947E6EF6BC063554059E8F5D244BD030156050F73D996E7
4808C5C379A8862F3DC972B0453B156DB644889EF8B5902F4E70AE9DC900F8DC
589A3411D5894EA001BD962F55DF8100729514937E9489CCA4A4EE4D6BEEC3E9
8688215A718E000D219D9A38708DE1920458AB5C3AB4DBD418D3C96BC0E5A3F7
528BA46EA2ADDF4FAE9806EAEBA5AFFB643497A092A9F117315E2185641467E6
FB4E4FD0D68BD3DA389675578D64C009F2646DB3C5591D01AF4CB2CCF9D3EB43
72819A7F52BD4495C6EC85F3F35F30B4D499251D8AF681EEAAB72E5F97D48E94
C988B232FF1749B8B225DEC0DC7191D36261DAB5B40B922A5671240C1D10B80A
AA928E170BCAC2D263C44899E65620114FD7566C51B12B6F7FAF81C9F8A28B06
D2C1713B45EEEFFBA3C41A525549141F6A84E40D9A20268972799474D690082A
22F9F534F81AA7F4F9FE7E8A385F2ECADE863C9756EE2E67D2F745778B69F5B7
74D24B5BC6F00CECEBFB102A8D2C0501F44226E31520A5C048607E4174A3E57B
FED0FA5C47C635A5C755C5771587D972373006F8CE7035FE86694BD7FAD19DFE
17DCB1AC84BC7B76965297F874E5C0B90304EF4B98CBF7BE6CF474428B9F5E3A
ECE20B3F81C351284D6DCFFBCD6EE1D0E5C99EA8BAC8FFD734D2F5EB777DF8AD
5F0DEEB8C352117AB106BBA09A9728E5EC0BF142D6256400D29814541FF03F29
F7FFCDD95411BD67F0347FCBA469DC5FF3582825C690B91F454652FC52EF6EC5
57C8B6DF15F9563C7AA43A7C48FBA277AFC31ABC99FF94981BA325EE77808276
097DE43A427A2C2ADF87317279FBD7C9355A0A42CAD57EDFD44BC7C708264D8B
A1EE7A69EE9981792BB81D8B2E38349005D80034A3781C2CA7B6CCE49CDC0BA5
2FCD9B400707C5F01EB563D1E54331E6D10E3348C35ABB3E3F39DD768F161201
900222BF87CEF946ABD5431FCF80768AD139A7315AE8605637BD9497A3B908EB
E9A21CD80ADD9254A5D23B69CE75503FCDBF8D02DC49FB1914DA3D0F9E965D5C
161AB3B0852833B6FD96374E9FAFCF9912B23CD64B362C89E9FE48658CAC7DF2
34D8451FE1050BDB392A37DFB40405ABA3DF567596AFD08245D9E794B4BB455E
5A408042574B45DCF1B1FC2A13632E4D083E655C9BDBDC51344C22B0C96706BB
7AE92002EF7C1D1F4E2E060F67AB0329D29E00CC268834B2E3B903203A433857
D2CB3BE94E996F240FD925C5C81652FE3005F73274C5F8D612018D4ECBFC0937
F24DD7A51336A4E916984D4CB18F3998198B25FD067CC61185D7A3ABE56B01A8
3C5882B6EAB5A5E3CCBB83CC01B63B4321C04AE86EF9AA44C81A29F4C241281B
1E84F3FEC4A728A5A507C3A6714CD89C678DDF9A074C6C6A2B05F794C8D78775
8519A73CE34DCB960483F3ABD7FC119686C79A3DC964E0866AFAE71FB0217B49
0314C1F62317E3203F88974EDEB66971EE73F5A0857B57E4384770F3BC9A69B4
36907423455BEA7FB75329CC6A30EE8475DFC78446194BB31FABBCD585A7A375
698A4FD82E7BF288E4403991D50A7C1599E62D4F096BD94F3F78615103C4714F
23BE2CBBE516771BB6C6B019073A295FEC07A2D9F5E105F18B74FC0D2DF031D3
CF6EB83E699F47A5E7BBD1323F733E9B969C4B4C4CA47FE6D6385EE7FC41BA35
E8A493ED8E9E1C39EBEA33C0C7B9125AD16B61CEDF515CA16FE5A4CA19FB04C5
4584A396CC45948004D1CD37F2A03D820DAF85259C4C1043A386922934C3F1A5
443E0D26C028DC38C19B237C7BDC87A9CC15E438046FB45AE9C173662836F24A
4D66ECF7BBF51BB9FA9350FB3772EA47F1BE3CBFBDE0348E2C3EBD46A30A4B8E
F8E2C0E7E034285DC83B7C433A6FFA2FEFF4715915B18E0417ED1A6F11DD9C58
304FAC87EA0396A912B1A15C0EAC30F696645AF4A8EC9FA4601C224B78B24EC6
300F92E4E6CDDBA5161B652057955FBFE4E1B1A3885F760A7FD5BF8DA826DAF1
8B23B234C43AB819D63C03CD087F9A6E356EBC7378D6BD7EDB93A47A9A836574
0418DBFEE89BAEF4FFD8257CA8CB779E30C3B2047A469E190F16E25F833507F5
3D0A66796ED2D2D9656FF23506F6779649CE33F0E31805E9FE2428920607AA45
4F77D6F8651776A8B08FA372AE39B3A10D1CBADBBEC510AC6290F7F94DAAFBEF
3680A68737BEDDE193218ADF36DABA127DF230FDD085240F320868D247EF2240
E03C9D16C1D604C5EACB88899AF60316FE28BABD54B9218870863A671BA35662
DCF44C0DCB829B3044C75FE8D4E00B6063B314201E9171F4465E2331171C2864
A2AF08FA85B87CF70F4E605FC499034A8B655F9B1DC5173CDFD6318DF3750D6E
8AE100116920383BA8B83F082E525A303DF73EFFFFDD91859B78A3ADD020D605
3D77A4F4BA30827FD08D4473786F7DC374A3F51E4C72820EE894BEADFA7B6607
7A1786FE1B3D930F220A2A96D0B7BBBAB0D8A4E9E18F3AA7323AB830249DE8B6
9D3F6E9C12A50D87A7FF8B167712186A3277B59D52F4B8A691418851CAEFD7B6
C92391CCBB688AF6D5EB3D2751503DBAC6EA1561049B889A07F9385843C8A36B
34417346601A5C64B4449BE9144BAC28EEA5568ED4F95A3ED01FDD1932F85548
80DFF770C3D7D9378F4A934F34D238AE6DFDFA0AA7821FA8DF4BE84CB8566260
9FEC598E34C29633DB9FAB478295573D94F637A5A52807B51461836CD69E1C9A
7AD97053EBCEB0CF642684701A7B7C2832EDE3E3C0249ABC81A8D4086CF6FCB4
D0F24F4F3FB686B84C1A570C2CCE252F958633F9854E6BEC059BCE7D5AD4FA8F
D5835A7C9C6CA26FFD0D84BA1EDEB40169FCE124FF115DEA723566A978D4E0C7
F2AF8E5D0192D591976839B3D85BA9EBC410233DD455E3057A99546DB2403CBA
DB7459B0AF237F1FC1A124D3C962465581CE7119C94A0A8008472B267ABAD16C
340BF94F1C735BA731BDF59555A7A8A5F9F4EE374E1D337F62793E69EE764132
174A269430A6B53B6813F8F5DF7BA2DF5BD32A62303487D39A02D45F9870925D
8A97E3E6D6A0E3A1544A0FAD2E3BF9BC3C4AB5A68BCF5C036ABF65626B909FFA
C453F01520EAD1F86637ABF73B6EBE870911BAD09287974C714905D85AD8FD54
BACC39DB8B7A99D1A96FAA0EC1225EC3ADD020FC93E4875DA26F7F135C19B340
2140D7782C4F25E29D92147F5BF9CC0D4C680F1058098B90C300618905158CDD
D3D3AD05D30526F7FC6E9EE4F478BA0818AD238CEA212A31BB4C19990809A0A2
A6CE6B0AC316A006DCFA4D3714B568DC1A2F34500F104347255D3604747109B3
462471520D4329EA8A7E58E13DC6289FECAA9A71673D92F0804F83880172B65C
8332341312DFD8332D44784DC078EB8BF412CA30F6E4764195A48934AB87F6A7
7C2CE9A17EF44DDAC26352464A2526069B8CC38E70F12C42E4FC9812607B3924
883B8CBC1B9677AF4E0C6F31FBFE5DEADE51BF7B714B97E1B22BF05FBCDF632F
23D1B7FE12CD55BA610261611F024882ECBDAD8358EEA8A912DE314C370C6300
AF844E67F4BD27431EC2B485331A2E83EDB1B182A1A288C14FB125C8BDC8F22B
E977100E502A4E3A77800AAF8D3E185326F8741226CA8507E5D000ADEE799123
79333B8931BF6DEFF7C6D183BEC244B3CA0B92AE14B83030AA7FE3DADBDD638C
BA2A125AF188F1E7B34B2555D62B95C1D4C03D68662EDA7DD6FF6713EA292EC1
62D6BC87F61F1D395E1B73A5D9C379B05FEBA8594EA82F9B3C0F703CE2ED4C8E
05991DE8B0F5D2533FACD18EFC1138E9D18013681C65F51FBFD8B596532F8909
5B684B1E9072C55391A526DB9D8A82CFF62CA803719236BC3AA92AFFEF08812C
30777A8D3FD64775308FF1E4585CAE02092F99BE14853C19005FFD35F33E8E0C
EE2512FC772862EFABC5D9E74F4D69F91E88B68AAD081755AFBA852324ED6A94
923E64518FA52C043E4A5BF6CD122C4B41811213E7FB378F73ED9C2857A7F88B
C32E547B3331AA3D38B6F9809F9F7538D13B562C5EE145ABFACB8922ED24D08D
887374E8949A040B819D67CADE609EA5DA4164DB42FBFCA62B19EBFEDB88174E
30A9DEAC6A37ABB30EF45D8A8204ACEF3DD4DFD05F02E13C10568F4B6B6E1595
33873428260D030719990B96105B3227D110C6A3AFBD679228285C3B2098CB35
5C0B6BCBA73DB36A605AD7930D894AD2BE3E953C4DBC8CC3B8E48A1B56E921E7
7221D1A1841D6EE67CB8C075A897237FC298AFDB39C35E0A888BABB4B06B1B92
5F9A1232EA2F11183E1F4D3C4648324D9AA252B7405922D0CB0328061E20650A
B7F08A0B42B0655EED9AC712C39D29D46F24204EE9BBC021F46537381E6F106C
90676245228B2C4BBE41286BB8C96CFAE070EAD4C8E267C3D366154E8F3261F4
49B7673DD69394108F51ABA4CD1DD3F498EB33F599A970CBCEEE609A5316EBF2
03345C04F2EC9254483095A3339553EE0CCF9C10F89C27A9BE908920CDDF19F9
73067D8F400865BD5F236B20459B918C6873130026CBE03C7067B328D447BB1C
6A418877DD0CCE400C8BF70252411978ADE3DF40752BF94A98908F1B0248F35A
9B47EF3C6B9FEF8E19774325E9D2112D7648754C89FB1BB6EB021CEB0933A279
4668FB01AFB6068CB0A521335D89E5070A8E06FB9EE313CC50E9565BEF743B51
B9B8AA10C0851A41736E0A87DD0AD936CDAD9AF71C4A6732CBA0CF2D236ED0E1
2A85BA37F632FA94DACC21581FAE0C4E2C9C0D46F070D79CE84A340C77EA450B
4561A6061C97F92DB18FD0FAB79E0360777991382FA19220D89CB85007312C9D
27745392376066ACDAA77998F5AE421977D6641FCCEB541872EA7194E8942F3B
C6AC0E7F1CA895C3CFBD96659C4C3D313A3668A66D245F55C911C055673D1688
0692F538A15459969A28E7CDF9C03BA954A66364ABDB2F14E721C8FB43B7CEFC
C1F02526CFB5EF187B69D05A31499F4CD1E13F591ABB2C3A0463EAAE0370C92F
CAA19D9C8346E9B29FE0708F0A052ECDF8AE2BE8EC550040FCAB6BB8912E47C4
D525BA1509641276A7D888CE069289A2E07F2A9B8F9687D0083429ACF37517C6
815374D2C087DEE1A9DD4B7412092B54C6C752217B9CFAB1F7150FBD29882E02
4B9194823ECD5B88063F6950F07B13C975E7007D9ADF16A78ADBDF396AFBC675
0DC4DCE33EA69DA7D50D5A025012A063027F36152E7A950505550B2A5003EB5B
F412F46D4CF249AC191D7AF69A121A8921CA54DA6DEB06E5D0359E5793356324
2AB0ED37C754C7D24D4FB8958235A97904FFC5D6DF1CD1DD1C21C748F4405104
1486E635AD76D721F756298CFAD2F2D7D6CAA040C36EECDF163AA38F9F08AA29
A00641CDC416AF42E97FE8723F9A992BACD563EDC14AD1C98DA93D80A81F2E3C
AF44BD10C0F22D6DB2D172D01A85C3A24DB2B23ABA4CA074E0C5D4D8BBEBD494
E31B3587E6036D60993C2C8977F4D6E28D531DDA65CF5F49A398E27F33C2BBBD
8382E863982595FAF9A9358E69F168D84957566C1D9483189FCFB14123320483
152718EFF4854B7B689A8B0B66B980E6F80BFEEFE94880D9A071A9B097E98E51
0858829DC05DCBEC9709E521C2F7D1BB931846D25EF3BAE02C9C9E136817B75A
B6859CD5C11CDC905FCA2AE894E6FB0C8B5030C18C9CDAE7CE86FB528EA88F6F
9E49563C98081D3B6F6864C17EDD8331BC1BAFA3E9FA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS17
%!PS-AdobeFont-1.0: CMSS17 003.002
%%Title: CMSS17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS17 known{/CMSS17 findfont dup/UniqueID known{dup
/UniqueID get 5000805 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS17 def
/FontBBox {-58 -250 939 758 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS17.) readonly def
/FullName (CMSS17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 73 /I put
dup 86 /V put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C2EB4E1CBCDD815D
CC955741BE4EB831B7D7CB85C1D25407B201CC17545B780E8D6352A0A0D4A6E5
DE796F2FF417A3620BBC6DF08ECB46DB523766DBB51CA9D2C9F1E3DE8F108320
3578BBCC8247BD059AE9C9B56528BCE58E4D4B58DB41F665824B4BC63129069F
691248167A4342A569F3541DE83830482FD25BD376A02F5FC2A38F6551647C21
90EFF59745ABD56F742D164BA3AFD6781DCCEC7C91172FC9129169EBC8E008B6
E9240BB7389B3A8583EEDA3B25E7D8FED9037741385EFCFBA4EFE33C68593D7B
5A400D9B7B37959DF426C5030EF2FD6CBCC796894C49162DDF304979DE20CEAD
29990FFBF811A278D938290B562D19AFD4F86E4032BEE83E0D19C6694D12741B
FECC3825C65612357A34E4B9C1339A5CED9CD21F1A6E79430E9D10FC9689738A
0C008E526EBCDFC0C2A836CB7D28A1256B7E0B7A148DC21440DFD5A0BB1BCA05
D18F7D7DFFFF9B49747DC555C38592857F4EB49D1420F99BD1017D26B24FFE93
A7C50EF56178BF4F2DC5B7E62030734F548D4B4C6C62C1129E94771CC9853EE6
DBA76A0FB60B083D3FC665F84B168BE5888E6CC8AC48BA19647D548B1B516947
A199D504BD2C61D447C547E128189326D6C6CA6C9725DEA862DDCABF8626AB10
C0A635128ECEC12F6AC471CDA0C87F3A7EBD5EDAAE562FE8DB6D7C22E678C409
BEFE7F927BD2FBD1C5E288FF5CF3492DFE9A73F16FA9ACB2CCEE08E184AEECC4
EE452CBCBE0D356FA042BDFB969E8182ABB6CFB9842588F73FDE1F7A3542E6F5
34968612FB1AB95CF7084025EAC7B7AB46D47CBCCDD2E631C8F28887FB3B9D30
874E4B8ACDB503E1E824A3DA893C4178679ED7CB36634D07B43E4BCEA0C7C06D
F61BBAB43C60F457395195C2D83C6BCFFE9BDDD4153CE84FE900CB9F55D89A01
934A6FFCD3EE6A4C496CD353C784B8C77A01C95548CF92E76014218E458A540A
FDA4B68864B432CE0C9A2CDAA92BC9473944D8786A6E85901EB0419128EEF276
392CE1FB154F47A6D057CD58FEADFCD019B917E22798AFA2F5FD1568C0254A67
BE716C52D54E103B89DA8E5A2F9B17B708B9471367389746964D86FB890E50A3
67C81F07056A1689491528262AE3B3F7725D77CBC084EABE96E43EB237881257
D8FB61E2F17BB5D30D234DB0CFE5D7955CB336075637B1081FE13B32A06117D4
1D96577EFC5572A3047CFD8A1CB4689C4A744EAFCB256F20429782438172A5FB
86FDDD4A61EC7616CACB8017950D0391C981F88125CD7EE8FC75197D61CA8448
9538607EB5B2A64363833C7B0075B80BD879BDCF50DFC025F9716AEF9F792D26
6FA2593D99FE7CBBC69BE81D60CF58A584E5BA86862637A8BB28425C7F228B9A
46BB6C38541E5722622DA81C197F1431FEAEE4FB7AF93F897CD218015D3D5A08
A193F4344C8FA0F994282B8EBA1D5F05522D7747A5B9F897A3493D6CB5EB3B13
47271ED7A157987928E8F7E29776763FEF469BFF6702DF45D892BC72D304AD65
38007EC5F091CAF340BBFC7704A3F96EC3219FB182C20D1740B080BD42DFCB86
22154F49CA31DB9419862FC830C3C87E09304FFA9BE8060515FC9E2DB8751FB5
5B97F9AABBABAFBAEC512E399E736DDD7C393291A0C65F9B73E2AC7403D96950
027B4B90A624721557376F0AD1DE5474F6A1824CC9BDBB367E16C7309209BDF9
A52697F8EB247D5D25F9E83DE42FE4BFC1264886E4B30C1FABD320F004538870
03FE50D0B8955EA3B9315B95707653DEC919461BB5AC20EB026E23A70B3058A4
52A17BCB9D119A579326DFBAB6C5E9C3585FD9FA85FE607AF347D4E5BBDEF98C
0F60C44F818CCA60892D28FBA6B6CFA838FFEB9E93D8759609D66EABA8CF0B2E
1B78CB1231AE71F1A47763695F90404EFFA3B4F8C913A941BCEF5E3264DDE043
B1BDB637E9299499936DF695011C5B5F24A153243DAE1E4CE83D2D237E99EA61
1CCC9FFFBCDA9456E0637BC64E81003B685385F2ECC5002A99D59C359D435311
28C4AFB62451B80B188ABEBFD3BF8D61C0A8A9DA88388C6E07E97A4458C8EC9B
BF58F3721CC48847D0E504686E5858BE8DDD2534CED6101983200671E7660A6B
3CBBFA13A92F5AFB750D754EC7A9DE5FFD41BD935961ABF2CDADD7BA8DD92C49
778A00A84DD6E2EBDEEAE64ECA07B5FDF9CC56E0FBD88A1CBD8289B5A9A680A3
F1E61B3615BDD18DE70BECD736CD7772E4FB31EC46B6A043780DC1293E1FA05F
D9F0EF4025BAD2094D6F75E86031392751756161FF1F6B6543F5A83DF2B55ED7
C78E0B7A30D486A900E3ED261FCAFFF3897633DF567085AE9C86FCB3F88B1F75
B927D6F210F88851CF19E96195BDB199847FA753710920E53A289C0A5235B771
13B074D6972D62AC61168AB6C57FB8AAA99CC2B3F9F0667DB015BD2482731430
4B9C57629C77A4A716E738B72C10C987F43C0A3D0A1D62361F96D3B56EAB88E0
2AE551D8F881EED75776A223EB6E3397E2B03961DE20B08C6872ECBCA4BE349C
197F7422FDA8C7A757D03F83271404BBE2933B826FC876E0DA0DD441DBB78CA3
12CE38DF095F7221BD6A0168662F9978BE3A7225322C69CBB50A2C6346AD0A5D
6BC75288A292687793055A0F8CE069F3AC8CC66EECA40EFC641238ABDE31B760
739D5546F3BC2A28239E2AB0B99AAA7531017C5A090C778A0DE6C6D3851A6C97
C2A626B38CE1DD78DC6DE61145864F947AA1345ED44DA48ADB134A5659CE73DE
8F52B4510C01BB6E712592C1EF58B923804CABA83C9FE53E5A855D3572797B23
49B65A59118C7EB3C4CED4C474BCBE0D13ACFBED15F1CD0C5D5A949D4BA91622
D6960A4482B834D097FBFEBB2D8CDD5A9795D1B1EEE03265D2B827F2B090D3C6
58B5C6B8533402F94667DC4F6AFF5A9845CA81CEC15D3A7F1295CC2F1A360F0D
9B74A99C34C8862FB8A29415AE215B134BB8B7F9B8B9D7E382FA9E5F46F8AC9C
337D88F37F412077FE48C1FAEA75B9E8F4E070FFF83110987A4F3723E5CFB28D
F3ED2DC547504B0C19FAF8D7C0855F5811A094D62E1439AF334D258D20101A43
1EBD8CC79A0699D1EF0F685596BD517EC053B5A45AD1B68EBC3128EB85290510
E4C42D3E28ADCF02500868BFE1ECB70005B5B2F470775D4738314F7D68A46869
8164FB3FD9AE36C628E88414EBB076122AE27E86B2A16389A6B9C59C31E30BB5
F83427ADF0ADFA53C1F35A0D91CB8B4F9837ACFE7E3FA5A10A3C986B22F8E154
C1E564A55D3BE44876776128BB73624D0DE091D37630E26DB8B6FDDF8F34D3DC
E3F8D3E7621DF3DA02ACE4EB3CD541E92CB4857A2B50C4DD507B9C0E6A34FA2F
9BF88F99F51ACBFD06FAAE9790CBD9E292D0A60FC59B60E3F176136BC5D3C443
27047DEA707438E5A8FD1944E0774201033725CEE85B7DEBF9B0BFA884846749
F27283F82225CAC1F21867662CB7272827BE5B78E78F7072A21697FA8E5BB7F5
A71926864B3205DAF014C2D3CBC36A645D3DA6D87A4CA12C8262FB9504D9EAC6
27054BA669269E6E932C0DA49E90BC99DE071A44D2C08E6BF0C8CDBFC65A332A
39F7F5ABC6C529FA1747650CFC872DD712FFE2C01E9BEC4DC8FBF59777DB107D
6E38DB0D2DCFBB26FC82CAD69D749429106037CDB5F1069C01BA61E7B34DDDBC
0441794F29D852066DB9EED90476626D184D46219C14BFBE9A99FCFB4A0FF823
60F2D71EBE70855800B7C2EAEF13E8B65A0974ECEC0867FFBBF91C49BDA85FED
B905D70A86EB35485C63A8C5B93E283604A7CDADB00B5C664DD0D1D4D07A4631
F83A2268A584E653C9404EE26754F0B81C14E7AB9AA542C170177D71C2C5AFFB
2252C12FBE5B555113CB30FE7ACC0EA86B4DE18BCF53C9B46F8D87E65E6F32A3
8BBD5E2164D30099BB1450B7C57CE75288080A718962DED791395FDD55C63B7A
977FA56E123F6A2CB842CCF98A0A92FAADD5CD7301AA25F3877B2414BFC326FE
551A0BFF15BAC735B5560F5E7F66B1774408E83A851B310D9471482CBA2C6C0C
ADC2782C6E1428F19F3FDB4F57E592BA7EF985F7BBA1DAB3268CF58EB1914EAF
7333841457BB03E6A68D2A9E76B7B8B8C5228902382531C44E54E5FD541CF2E4
D86589460B916859F1DE87DF4D10FD12AFC57E389C03CABEF44FA9428BB0B333
E258733AF1372855B280FEDF087C633701D8F8EB6A68941E66FCA2FC243827F0
706547483E13E723BFE81EC3D096E32C21D0E7F5A7917D4F34BF582A2B29300C
904AE8F82F4B50D2C3C7F8B9701451A4121725BF2A55CA5DF0584E5BC5A741CC
16F8551F485F2C93E6E169DD83CDE1A2093406710DFAF72B2EB075BB01FE9779
8207D068582F7625ED486812D9FE571FD5F655E9E101E6807D5785DEB574FBBB
F6F3B2902A6A8C508F508B2A9D0E0A17E41F30E526AADD1500786AD789368855
E9B68B5226751576D04E8C9DC41A40260D3639843E057BC1D035F556BB0950F6
3C1AA01861033008F0191394358E73750997842ABAC2CC98E58000FC28322193
25AAFE634348B31B1A13586196167BA1A57D76CBE9BE39A6F15319E055A5ECBC
873B110A80DCE95C57EA9D6DA1683B2CDD0D839EDE32CF28409E5ADDC07933F1
464444ECB94DF8E94085270DF7BF7AEAA1DF4813B665C46730079072DCC1830E
2B53CF271365FD4B6D4C55E592FE3A343CDED5CB792AE970FFF7AAF6DBC95B64
EEC477032FA07F86FF19BDDA23D8B45957462A6B35F7BAF1FD053564DA9A3BAD
9DAFC06C7747916395AC616B6076ED236400EBCC425081A1A96715BBFD3A1E6F
BEBB070EAEDC6D77AF8E73B689333DAD2D825DFC3E41352B5B67416646E324DF
AA81FF48B419E0E130C92735232705F134E8A3F17A51AAE1EE00EBEB72C4FC50
8B930F6DDA0015EE5102DF200D7BD57806CD08119A3977643720680224FDCF12
DA7D0BDEBA050192DB87BDB7644DC3D1DF4CFA7A807B13D7A4E22C05391CB0DD
7AC8CD72A861D4982AEC874AB3F438A954BDDDE5E15174DA05522D69D1D33B63
6CDC647D910D81F24FAE2D98C920325220C303BCC3BA8E7F9880664B29420A8F
85F98C03309FE2A0A652C09AB6AE191A760C4BD18F9B706429D46005CEF0CEA4
4E0E171390B0D99D02C3A54A36E93DD00C852695E8B18F0D438EAA8B51DD6EF6
5D3F14E30DD41491D39C83BEC83E914C781196E4EB9E5D8A96F2A5514D462460
5869AC5B54FB940BC0FF739733223ADAB346431B5E824AC04BAC9F2C62A1E349
10DBA46694BD66B3642EE61829AC51DBBF333FCED695660AD76CEAA4E77A22CD
78F3B4061F4375AE004A560512981355D0E4B8B783EFAC2F35820D237140CD37
9E75FB6FEB21AF8DFCED4EDF8B2C8CD07060F7027DA678E650ADF1EBEC47BCCF
27BF3BB3E2CF823F0D1B4D3555941953E8297993E039E0EA83B813ABEDDFDDA4
248F45F8546C71389B373D2030F60EB98456EBC829578E550DD92C362C7196AD
A4DDB7A672E8750840320CADD2995A68B6CE541A3A174C48D01EEEF19F82986E
339B99B75F0942535F3E3B619B94AD63AEA36EEA750E48D0F904D385E808B029
3A9D5E9FBC35B4270D81B1FCA8BE54E576C591D1196DDED33342DF595C504B3B
7BB51B6436E9A53DD1C796F164A7A602A99ACC307645085F1DA8F1EE34F1FD30
CAA2D72CC41BFC19D827C3A7FA9BFFD17DD2AEC41AA019D7B185C06A19871D67
4998192C973F5809C7EF4C225F4180F7C1A8ABE4A4989D06FB6AEC300FBD9792
F5D35FF2C34220B2113BE6D0CE81A13620AA043C921E70284F7B6E358A9F6F49
48A2C43C31F58C9BBE316D2B2DF8DCA423AB23B840667AEFDB871BDB19949368
FF999CD67DA81D654D3E1ACAB38D7B620DF8C42928631368F47123BC317D5ED5
5D03182575284B630ADB3E712E4B1DCC798A3F86B8CDEAFC88F6AE4039AE8753
D011E59A625427B68949C89D76099173EADDF2B3FF108151E4B52D5D67C24A2C
E92DC925412802DB2B6C8EBE24E6FAEDF00BF9F49182A128F309572A55CCC4D9
DA3B177AA2F1A629B97325F818C4BABCA8C2A9E70F134091DDC16A69AA758A74
30BD48CD6CB49339F28F283E1E3A05C9DBE01D84F964CC3058D627CD0191DAE3
33B38ADE3AB56A73FC2B7E52B4B834204FBC41AB78AF879305A0A2B22E41420F
4860E01C3843EC762CB3D2631B99E402417CF91770E3A6627D9E689843DEEC48
D288950FA8FD3FA2FB44F960145FAA75E7E801577735FB0F518243BD64165DFA
53456E6D1951F17A33AB2F908682107A69A46098B8500139475434829A61FBDC
A593656A61C7AE8CF61B27341AC9F7F50D7A49A5B400D84E29C0D04486F0925E
778125C4FABAD95A9A06874C5BF7EF24D19A5C4C6862DC7DEF058DC9286A4575
F934DCF1252BB5F587644F6779D082178DCAF038334135BC10942001ED6E4907
B8752E8B24795F8F5E153EC8BD430D09A5885ACA3663D8E6D46CE478F742E069
7E6CA5A20D570A23291F6F9290761F005A2A3D1D43657704AC8357A9A098AB72
7A6C3E07427732318FB475CFB31DFFD4B3B2592F4A9F0FAB39ED4F7B45B5B9EE
3622BF6F8AEEB3F24EE0A7FDC59D92BAE9D69D2795AFAE078621E7BB4D5159FE
2616836DD740D7C5429DAB2C9071B5DB6EE573A2D2CCBC462246A837FC5E3776
23D9944271C19F338EC8BC226FCD489A59C29221D9122E6496DCC79F875A157E
CFB3C61BB62B4CC11861C13108F6F9351242A0A945E34842B79BFD0F963BA4D7
58FFBA7F9C3DF06634022173735206287D43364571624E94AE037496E8AC4EB2
BB175D168ACE352E51CD2B7CAB5ED47557533E1C9820540BE3EC7A678D797232
7DB970F7D8E3B8BDD69BA8DD3E305FC8E569744A57C4560E570189D10C7E1023
2D5C25B6EBD6078EE71C8DEF8FAD5EAAA2DAFF3D8D03A5B38CBD40C30A9DB09E
021E9B8E200DBD7CAEEF4C4E679C8F358A048147E38B8C1A0BA66F5135645705
F1A825EC4645DB43DBA36CC2B928A5C0F90B2BF7F2B747ACC153162DD98B715E
F35100ED5232E20B8B81D04DEFC16C93F0C25C96ABD7E7CB37977579FFA33077
E1B984AFE5BDBD8DA4A38A8D890BFF40B0907F3BDCAD309ED84C85F6F4831AC7
BB72729DDCF7E171001EE0CAECC0E315231DDD748CA02D21B3E975074FB292CF
BE44037FC9CC1B3272FF56F65334167085E5F89BA14117E50271C4F9510D3D19
04A5A1EA4102AAC9F84D53D462272CE6533E1E0B78A68ACE6B0F304D53F819C3
B63FC830A13E8EDB008CBE932350F2FD9073686F003EAF600856CAA82CFD073C
E81FEFD0B0526EC0EEB44BBE497FB1400BFC1231F4B74F9C0E1803124C66146F
E182F161AF63F547F6FA9DB53174F8B463671FAA8510FA1C88C2C257C88FB50A
4026C1EDFF7BA0C723B6EBF66355FE681998F954B3DBB3E2B27542D38FC3D9FB
7E6B8170D1194D1B64EA38A567E5932DB71A7C47EEC1186696F0E83F7067AAC5
9A6A7A1BC4A27BDECD1FE388E34721951867A0FB1A85B998824BF6511F1AAEE0
D8BDA3586CA4061437F2A432D4AE30FA18C00FA133A5576FD3CBD981B528776F
4B77AA24032BD8547267218D76D95362CB5610585708724517F1174F0F13B777
BA16B992CAC59C8EEE3F646EAE209792C5CFC6A50956D7E022212D4AFD3F70E0
46FD57B19E24E8AE3BA83F2A362CA51E747C6C405CBDD1711908D5B92A3B2D14
EA94DA77879BF956A0E86F5E3CB4673C0F18F57580B62E6B5D06FCF544CE8C5C
086BECE5DEA564BBB5E456F818BD729B7E5D42FEC21F1B21DAB103722B0DF5F8
975CFB5F1762444C54EAEF9D3EE785E863E59BFA94A1090247C458B7E0FFCD74
774BE704298F64D877C2D63CE3974216C7EC4664DCF984A9B2D5CBFE9E15B7ED
B6CF5AAA301464AC1BDEB4D8FB5DBC1103123F6BA04C2FB6A76E02F79A96A5E2
A5AFF9E45893C971445D731DF9B8809184E17401F3422EA1E43EFC6E8F0FF6C6
C6FD39A0003125C441484E0E0AE51E8419204606C47450B84D0BEACF30821EB8
C093F62D0063529846F3C4C33C57F3AE78A8F6899925308513E08E9873610C88
746AFD2AE74F98670A919B4A48781212B9FF2AE308BE6A3CB8EA13589870012D
78EA0BDDB396EE6CDF998BBAE34AB04F8C987E2351D98C5E46A22E8C95F74B46
E700F1D9DD0E0ACD84003CE73FA97CB6D98122836A068C9B5F4A9E36F2C197D9
9987CF83E9AC45F28CCBE8ACA9A681B6D31DB0762163DB7C79D9FB28D69FC2E8
35A94724291E88E6F7EA9AB64D67717DE670ECA3CBD43509A82356540C5D4394
4356EAD948F8B5546DAA9EE2FF0B154A13ABE3235D040FA5809F7A4E91EA6077
307CD74CFD0C03F50FEBDDCC967233BC1E7FCC6C38B2EE9D270C8C812CF7730D
E67FD6386B28E2383230E474C40280FF7425044D5C2B3F42D3D4C96FCACF68E6
2A5F97CEAFC1AE14916AE4DDDE60530ACBFD535783BA8E9C984E706A0DF6C1D4
AEBAAD113683877DCE98A3F0E931D4D6D59A84F62C199575836EA81F3CDF27BF
0B1D46CA06FFC92FAF8A4A4CBD7EAB353836BB80A531EED8FECA8399BA181C1D
89E6897B9EE50D0366C0FD474A9B83B91B0EE596DF464C8AE602B7D5919BF9F6
5035371A31799C368631045193AA449B13CFE89FF05FFF9B236F312867D2027B
198F1005DC4301F1FB2352990C6E13CE4DCB37386267FB22D5F3C34777F7E3CE
A11216A86B5040A6FBE80DF22097BA50A32341726BF342B9E1DCEEB0056AEFAB
A7FA6B83952A196AA729FEA7F359A2D7513755832D3068F4E5FDC99AAA250B66
20138D679C2EA0877E72216B1E9B569382B5051FA2E28FA4D0E0C77528D24AE4
29EB42A68F0D5EE715EA17CD80388BCE5FC1CAB85C64E16091E0C4E7E9CDFFFE
C4E82E3657D6E4565B44CA05935BA1BED186D809DD82C0BF4509B8654F852A5D
F5EC6B4D88AA70404614F3D1B4167C0A622AFC2844CFAB0C3C2A3D4C5B466638
978E53A0B561523D1C522C6EA9A3A2F0E36EE06709AD6EAE92E3C39D458750D5
BD3507F294D84577754947A238EFDB4913528377080FE77A22A417AE7AFC99C5
6E07598130C5C3336AF7FECA188E4EB83E8C94E4AB418A82F5C915C31BC8F0AE
60CB0067BE80C6A294B8E5BF3308593A6BE0C04FC991AC1B7FBF5403EB87544C
37698E727179FDDF9DC5FDD1EB021C5FB28D444E09BE60567F307D6EC471404C
0684A204FC4451EE4E6DAFF431711C276A6294999EA94A6B8402632AC3FB26FE
9444244DDA8AE95CA5AB82CE8D9D5AEC8D589E81C760B47DC3A826414014BAC2
CEBF7AB9A7BBB4DA2450DD30639113DA11A93617FB5A113C40698C4986799FFB
350C84E02729D453350D5837C32BB118D12F0EF2AABDE77871251C7ABE5C7FD7
0D5452D34B3107B075B67F259241E8ABD6401D7E172212219FFF47217B357A65
2FB4D00EA55C5BC659A73382F9642687C2AE90B59963215328B69420A3BDF710
2CD5E639CACD2FC913517199A78B6E3C76BF1867B75277038748AFB4259F85A4
5B4BE4AAB05A4D824098898996640AD6370EBD88CC6224F7C5661D9E645C8D8A
3772DC554F11EAA78119CE164282D8BA649363AC7A7D4A1FA9F719C23A63CE73
E5D49D5363134A99C9DE6A14B06CD9937CA616680472DEECE574561BC01C24F8
9B9869C4FD18483D54A352D45DEA3A948F139DBC3DA442E2EE10F0855FCB1E75
A6A48226A087A8CB376F06B26A6F7B2E3CBAD391B68A4AD28ECDC3E8E2FA6F10
4FFEF0AF51CE6CAFBB46BA0B2A96E810DE61A627E8005FE2AA1875553AF035B3
2AEA4BBDE06B2B7CFEB334FD61F766023579B7CF3BCA10860307D9A1C10D7318
012220A1AE77627D2D9D57BDAF4292DB1A2A6035AAB7E3E26FEC1E268CC82C4B
6715CCCEAF45E1ACB4972403485B2B2AAD1F70A011DB02BF90535B9824E1F82A
C1AE5386B1EA57E916F1CEF81384A5FD7CCE7557410E5CF15A8509B448C61CCF
E8E09043E85BF3380FE7FF26045FDF9F00DDACC55EA5C96F35DD72D4FAA91BE8
FAC590473F3BBC76C5FD4F3AEC8DD528C1397F7B6AC3DCD88DCDA41CFEB16497
589A27735FF35052E0479CAD65C29A82F14131CFD6698A58C5A7A2F9E49B21DE
30138D53EE8AECFCF06FEB18BA4DD295682FFD9E564E3023C5B61842377FBB04
2A9267BA44AF842DCE5E1E79F1DDDACB4403E30A104DE45BC5C55577EAECF999
48048DF28BE5BCD297BF0938D1D3D3AB6ACD717585A0A397D9DF8BC1C7893DB3
79EFE3F62AAEEF2088EA54B605D555D1088FDC9260B65C809F7112BFA37DEABC
2FA03F59990554EA471F05DA172E3931FB6B1EBAD49AC0055E9E29307BE4B44E
1E0F6FE503E961DDF169
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS10
%!PS-AdobeFont-1.0: CMSS10 003.002
%%Title: CMSS10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS10 known{/CMSS10 findfont dup/UniqueID known{dup
/UniqueID get 5000803 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS10 def
/FontBBox {-61 -250 999 759 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS10.) readonly def
/FullName (CMSS10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C4488BB4EB864B48
63941B9739638D2E6F3CC778582B46AEB4E466D89D1C211225274356A4BC90F3
274C6AA56E200249B7D0949A3FD4185DCB3E5286910EFD7CA72D5D8E8052C96F
388D12094B87D3705CE64459558CF024667C0FE96CBB32B0BC9E51037D7BD62B
E4B05FF99384E71D78441A79B0B1DBA1CAE02434A9FAE46596FB86B873B1670D
AE0BAF516445A0DDC127F8FF3ADA0B10EC30A9CC1F7E9248828B5E8AB46C3FE4
154B80A54128A08777F5F9B8C519C7E3B632B3476F007FA156E9F39FBE57638B
4214CD2BA79BA9DDA0F4C073AED814ABCCC2F7906C57A872C00E67FF03AC1200
29DAB92376422FA21C67CA98BCEB8C431CA2D3EDDC16972F84BF6DB2F705BAB5
CAB39C82D139FB1304B9E7BF1F6FF447596081D5690B1519E468D6BE49C329C5
C9C809023EDEB9DCE4A6D52A8049E0CC134E8B41BFC6558CFCAD3D9D2773EA16
131567AE6231B3235869767A1E7C1FA6C8D6FC1B276CBB1CAD14D376188C9682
302836A9290E587D4225EB8BB1DBA2C4580A81FACFDA197174FE948CE757C575
F23070FD84DE121955D7D9307BF986C5E739FFFB6CB76822C341FBD9FC2E3378
AC9332B40C07D5B8745D74E30F1D719EAFAEDBF5FBC40D0546F69A66072D8A49
28D2CC2E76B9B1EFD191E0BC7510C2C8761BD92EFCFDAC263342A01398A56D18
121A591FF5CD4AD8B25699A7897E60BA940336BC17B9EC9F97C2464D031F958A
A3548D0C97C50C580B6EEFD0FE8330EE2BB0D2E7FD1DAE33448953544A4B1C5D
8EB57798D0ED4B22909FEA78ECDBC4D8A124DA05B9999242D68681017285A0C7
69041C1F79442279FBE328733EA0A6694D68BA89739FDB9297BE0CF1808C07F7
BBF6F1538DFE084EC8C0EC24D883F6CC08A51DFEA23EE920F44BA55FFF58E960
C7BEE551FCD2D5814DE7E3F835608073C2CB80EC57100CFD484C837881674E92
B217F4D11165427DACCC29C129005874C05CDE5FBB2D912368EA2B98C45AEDD8
8A0D2493F60EF36809C8C6EBBC7856F6656E8D398BCB29DAACD4F7D4300A0B01
161CEF51195D2C58DDFBCAFC1C03F49304ADF02789889826F1E20BCC14827565
F2A45CA57DCC61B52E33638A0C6C5A59B145E82B82571DF1806EC40FC0E8634E
A34A791B1325571E19F3AC2EF6FE68A14B0ABEF7EBE0EDA3942E85E5AE967A14
0C5AEBFF2A36DCA8866700CB7082D2ABE470864C44AEE1F6D180D511304C8674
D02FAB12A7079ABF96E1CA3CDF9D75532123E87663B1D524265AEF63EB5C2169
B67A651A101E1C7EDB008D3DB06DB1FC1A81B41B291D6C4A58FB57989FFCA434
DA84B3914D1D80B17AA3A55A70BBC06C49DD5F7DDD03FEB0055088558FA192A5
261477899857CF598DB740E82D035E84CF17B33048CFED2DCBEBC2B75CCAEBEA
B6C5AA1C6978FBB36ED98D9047028360ED430A0AA69AC85A8F83825EA649E1B2
64B260197B06A24A1DD969CEEEE136FB046D713D0630B246BD41CA285F076038
F7F8431913BB9A3E70311844D4C22AA446E3CA217A9DFD75A898997130269B29
AD4AB7D9662856E677FB2DAED7078639CF31C6E6637C74DE2B5D0ACB88BD61F3
CE3C5D56D3D4B3EC1ACB33EACBE05E53A133EBFE93CE6A0CBC8F24BDC5B31BBF
5B3E55D6B40B1CED389076014667E28BBBD60145A06BDECEE8011A2C6F06D091
73767A8045CEF2A110B614149FEE783A2351FB2938A9F73CA406538EAD82ACC5
A3DFD3DE00221E1B4EA977AF8C89661357FF7D2F1FCEAD6CFC9D6AD81F95100D
EA1F328249AD84AE849220E6593D45015B4D7C9527F3063E9F6DB6E572092A1F
1F460696227D5F0FA5A5484B1F0D8B4A35066451663BE448D924DBBFD388B6D6
D7CFC87C9E75B7CF79A4C9207E29E0BAAAD7FDF529B860F7731EA978E335334C
13CB2F0A4250F5957B44CAA0674AE8356F586A24FD137103973B9A1FC31090C7
C84DC5D380404BCDF3FE20C6F74FFDD8BD1DE845E99DC6FE09931F003834ECC8
08C5D962070B6C44F901A787CCEF048A2C584A2285506B4D4E82B1BF130E2220
B6C8B3240A4CBBCE16AD3676B23A50B75F82CD88D1B8F21D30A12716426112B3
23DFDE5A348DC9DCCCE5BB5DB5433A5AC125DE1229FFAAE0D8319B2929986EEA
56A93BA1FBDBE617F30852A3DC8C712DF674169C6D656F75E252187A085B2788
2467CC4DB08D48EE6A98C61BC55E6EFB1938FAA718802B7587B94C8F1477E9BB
DCF6E02B5E67FE3AD9D87C321CD9BC0CCD36B9C4BC601E6BD552EAB8E1C940CE
3A22F3C2501C3C939CB4F17CE97566F0A04602D2A22A05CECDF4A49CAFD6332D
5870E1F31AAA5F86867F71610CDB83E473B9D20BA00D8986D7148E0EED03865D
9622864B52B09D12E0C5FCDD023D29D5AB1CACFA92B6FC14FC84E95F407861D5
2BEE3301AF399FD7ED04DFDE6679A345A282E7FC08D47E3FC8969D3B00ACD7B7
F8769647D6D4F4106340EF739583374D023C2702C48FAC1B643B5897D2D7DBCB
73257712A0FDEEEB98A021D218CDDEBBA34687E23C4828D7F96D1ADDFAED7EA5
B279322E6D55FB486AD8F3A8E7B2C67915564FE56F0C9277A06B29C47FB7D007
11AFDDB3FC1B173B4E449CC6B198041CCA0624D81B4840FE5B63BE72157AC6E7
03E5E95D2E2CE2E40BCE8044A8F2AA45F855484A891B9F0F8F70188AC66A8DEE
F4D656CBE216E6D9AC33BA8DD0685D480833E1226784469A221D9FA3CA600AC7
5574B5226649A9C48CCB43339942FC9010F86BAA2D181AEB487A92A96BF2EDF1
60F3B93FDFF4137A25A8AEC5ADF8613019CDB103DC4367EF3D8AEB4FED0E6BF7
622AE0CD3CAA0321D26CA4280CFB60D08D9560AB8AA5698231171B881BE9A27F
BDCF3162134126212C523738D221AA05E31CEE73D9D40F73C450B6AE2C1E70D5
C37162BDF55943069923A290A6C720042566E55A21CD81C460818883AB016C16
8FCCD1255A66977DC1C110261D7642199D466DD3D2493A2D47694F842241C474
1752B00DA03E69CD16A8A14BEB8A431A315D19A39BA978E46EB1189089FEF647
F9DBB58AAE6B3FBD475E4DCAD241A051DD100ABE81D40ADF18A4C50F53BF749F
D6F7C8E02A5665B4AD18DDAE79096DD447F8BD32C68F9F97F05E0071D9E9AFEE
257B96D48ABD9920418E17C8F027E9E975E4A08DFB1988E7104CBBC1CAF356EA
7750AA7110BE116AF1BA69A94776E4356573B38472A8A1292C63701543B0F315
611A0E0595B30424A1137478BA6F990AC7C3AB4DB69E75C222B617F373C521D4
246E954E9857AF59D1E6C36412B643733CF5E1C90389EF0E5E0DA55D3AD12E97
E7630C315F72A03CAF22E0ACE3AAAFC1D496CF4E5ABC49C2DD5E264BE7EB2698
AFF36089B5DD2C53DB1C1FCFBE1E89D41A95DDD278CEB29DC85FD1DB8B83CAB1
EB37C531E9BB8466ED6B8B60258D3C355626CDA43A32834DC89DFB11E5FC6D68
0F78CFA871113DB81A1690250A6F842ADA15734CB6DF7C6ACED6D8D586BC4E1A
94EF3052FB0F8B9454390B882CBB6E135AF1F9C777AC362C2A758C3A98117120
73C6E2FAFB580716D4B2889A4331CC658AAE996245685B973D9C184541385680
AEC2956107DAB00230FB39BE98D3CA898D917E5F2088F26CBA4F8B5B115B6443
8753331233B10852702FC26D9DD4C990C13CE4D0DCEA23D62A826A4B4FD16070
5F3638C0A50A3373A33FCAA6F3644975AFD0560EE5F2D1CDF08820373468E4FE
6679A229D6955CFDF7ACAA92A87E6D8571AD18CF59F84F88A674B2946FF20A28
B9798EAA22442415EB46B9498DDC0F4BA6ADD347AB43E9293CAABEAE80127378
129D5DC69F6DFFBDAFA5D65580239E8EDF6833D0DE6DF75F0FD090A83CE0974B
AC947BABBD1B1C7194DDAEA37B0CAB477ABF9433FCE0243C8D308409427D1DCB
8EE4FC36C7E5CEE104904B520B3F6E677A5B92F694BDBC2C799991667E0EC14C
B95EAE7DE1854BF4542F05B4AF401CF67FC3E46EA5A0DC362F3CF177B1796DA6
753AA803E724D1721DDD1BCB0C12CE0859E172D2A370C3697286F80D9E138AFD
A0EE016805F847BD30D11D8B891E54C77AB51A7CABF76BB14B06153C7F811FE4
93FC4B7CF161051A458EDF767DF94F487DB939A2740B4242BFEE234F75084DDE
207E84533004B933D43C712F0C71DA4A00FFD6D721EBC93AFDC4200E3B8DE433
3ED3E1DB799BAA27548ADC853AFF5D9D6BD92D644E3CF394789C99D9DC054A26
7770AF5DC5BD6563929AE11BE341F036584DD573D3F43D9D975201EF77BEEF80
D1EEDD1D4AD5D4D4DAF6D5B9D4C1736CB111D6FC74C236779C0ADA430323A825
09EA8D0CB1772220AF28B93098BDB36913159208D1B2D7ED45808BF7B686419C
5C0E3DAB5BC9830FDF3B494D624EE8068BF6F5212BD69EF466B9A213047BD105
B848F056DC544A8CE66C546B1A4DCB4BA29CF0EB4DCD9C2452F22172AFF33B29
E97E12D8F0D312B03BD9E5377BF0C81D884F1E79DB66E8144F106DFD2579AD26
C693C5B68F3AC46BF0D6281032D4D4BAEB2243151AB1AC0BDA2ACDDD4D590C90
F29B335DF8F57DC593DCC081FB56924028E3161AC4865B49D1B0F63F5EE866D9
7A71171C09B09A44B0E32F03494D9EA63F3C89F5E772BE25A6557F119299E989
99BA041694ED805AA4F3BBDF00D88171C9D43A9085A287A36A1F0F9386F2A98A
96815CA51F06E1CDF20B757983C5FDF4003F5438232159F325C6335B734FD982
1423BA77D0EFD044381AFBD0704E3DE95D23A70E2428E9AA355A9A8A25C6C74B
48488C14DEC93A766E112D74C83576ED355F17A809E8D3F9C65C4E3E14EF484F
4658DFB57597E2A4461D8044E95844391C1275D63F282B37888C842A5151937A
45007547263D70195ACC018A373D498B88C5A028BC66ED96A343EEE74D61EEB3
D9472B6A549CEB8699F4B35154A0E2ED22867E4F9E4A76311EB2C9F9078FBA81
838EA49C2966BA64C165434DA3093206B70186BE80600B891D9979F730FDC794
5DD6D8B2090CC67A634B719F441092A10C447A86ADB78DAE45823ECED5FCEADA
ECA52E363D913D9EFC0ED98A5A1F823DDA3350EE27F09C14E4C7298CC0FB6200
DEBC640C68C82D70AFB7A7BA668F1D7948686206884736CD03D9F6E6CF9702BF
E3C932CEF3CE07FBBFCEC0476EA6E8D5D4C5C6450C8FB236B89BB82D51886240
5BA7462F50A88F69228DCBDF26B7250E90B3DF8E94ACA1CADD9EFB5C73EF9DD5
46052314D445CC92512BA231F79A09A2F0D91976B160B8C9BA055DA4AAC1300D
491193EC66A6DE12BE01EEEDBC3A2291DA1F27AB76596A236B75E19FC5F1FB6A
DA1AD835CA08B6CD03B97B4CA1BFCBDD2500BB09F1A1B0438E4A759370EFA318
F062BA9F3D352572CE232E6FBADDAA5363807D0DC5320B807FE5485C8CB09B6B
0BED9F5B1300FF370252DEBAC9DB25CE2EC494E8EEA45FC6604B3C104E81B287
EDD49F3D7430EC9176A16B4FCEC5DF68DCC11ADF90BD5337E2E4B59BEFAC8298
E5ED2C7FC5928635420FB1955251932713236DCE28012C86F63D12AF1DB634D0
0B8CB8992B8723548177BD6822A808FF221A9E38B0DCCBC1F3430A9BAEDA89CD
ACEBBDD8CCA5E17F1CC37E35A01E058BAAAB6BE7124314DA19962BADB74EE73D
8FB13FF6AFB6FFF97926CA045B62B98BAA753AB0FC78B881D3FAFF9EE2FE918C
8EDBEF87637F1530E3E13AC090FF81F4136E08D5F3734327E643CDF621278741
A17AEBC56E21217888A6C8B5ED4269731910E7E25693CFBDD4EB4A32698F2447
4C45D73E810B627D8719E4E34D8FF378F9B68BFB149AC67B3B1E55F20D097FC1
AF74D46F5A3923C63DFEBFCA210F6B257F5FF3F2AC34CE41C15C9977634E473C
2235295C05C3DF6B3009C7854BF11CC87471CBE085793AF9C5D05C5479B9E780
14A5A6F3F6DDE5A18243DA15732CCF26ADE40C566DBC3C62B71D46DE87A12C6A
647CAC923254E2E74AF882DBD5C9E108A9160393C5CD12566AF7C824EFEAC56E
6F05B92C73A76824C5ED1735BCBAC61B98D509250C854CF1500C212F574D18D6
4426B8510FE9785B814A70E75C9234D42483E736D0689D3561E8EE5650F33A36
D50127589401D267BA6442E8616E2CDB1F6691D3FC4A2A377E5E154972E890DD
60CB463E9EA9A6EA61087DF452FA5646F69BE879337EAA0F5DA4438FF0365627
4E3B16851C2F08E976FDA27AF451CCEFED00376FC3D6E0C160F0BC19544DE289
BECEEF9A067FD71D54DA3A4F73F06E2F522BA07551296214DDA47B1BBB1212E0
1100ACB5F65FD30C655A3402C83058F8ECFE48FA60B6A3DC86C4996414130194
6676EC7F37454023AB53E9D9EE60249ABF6953E76DCE3123DD268BBD492412BE
65D7C3E5A5E483C381182A8F19B506F0AF6DCD55532B89852D1D96021B22E9DF
D9D072BD7DD4450577E658B433A84F92752B260AFA2EC4A118747CBFE36AB7D7
6D5DD96A119AA1BDD0FDCBC3AFDAE5FF72713EB46759A06CD09B5CFABCDAB0E9
85599506AC07AA525978AB157496163AAB387F079EC9FA1F9E91B9C2FBCDC9EC
7027D77016760539AC03F1C1DB242D28D6EE946C42DD2262D82ED48C3A839853
BA977046F0EF373AFF884AC3112D2FB319421C3165DFA5710BFB9AB9595A10F4
9D05704B9E22137CF27F4B2DA9CEF6D8801D5F792969B2E58FB539B8038DF440
6DE20C0313A7BCD16F279290AD6859B0E657CC3041C7928CAE35B9D3A681F2A3
2D40F8EDAF1127E754276556C95E1282514B6EB6E43FF4F0FAFF28C715E3F39A
374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F77336
39CAC45329A372205FD551B9E9EA5082411207473D9D90E76136AA70180172E6
AF6EF3EF6B38B1906B904BE9BD5251EF067738840C28877659B649C6C4CA328F
1BEF8A9CEC2CB062702F58CC0B8D2D097FBC278F9FD894E10ACE1DEC4530CBF8
E4E467B6DB9C596DF0C3D43E6AD70F30B733EEE692C2EBD68756D0C16E1F00B6
AD011B5DA073A769B53C2DA2E7C9B7ADC6F551BF4DF4C39C66443692C3DC62CD
B1E094013F364D04BE2FBFCD1C7B2836180E9022E0434421FFA4317A50096684
CF0B8740EF680F27F4A84AAF2AA92C64883BAF57BDC60C6467A8D4E09E6316FF
9BE73053045E5F3586DA3BD1298DC15D751913FB1E72EF80047F6B33591B97D3
DFAD34EB224D64EF60F5B4ACC6EB42E1BE0CB2812FF2F3C264AD2E44F5EBA441
670CA0A60E73176ACDC4E42E74F8F489C73481EB5D46A61FDA1C0FF9F8844DBD
99CECAFE2A72833E4522981FA13713AAFAF8F121E60FAA6F379B2C8874CFF23B
8FECE70654E5855E525A403700A96CF7F8111BF2B58386E29640D82F1DD86900
E0E203F3ED554209CBDA2A61A5641D4B39D98C5C43D4575648D06BB82B6C4D4A
F043EC61B17C208CE8B4F43A7BCBBE588A3D13A183D79A47404223037FCFA4F1
DD237344E589F161BB9BBF3FAD2E28749350DB9A74C09E894BBCA85B82E704E2
99788B24642A7D0F0FD96601CF1AE4819EBECAB89824A0DC1C03BA4B546ED36E
DABC8D49CFAA53D2A9A5DD6B3431E364C99ED0323513476CDCEE49BC413E50BF
51EB93563DC03B62F84C5F96ED713F288D109C79179AEC41424822772032035A
40E84014F5BF40948F05E8562C99266B9E54AECEF94765BC79375C69A0385023
A014B8705931C9A419C8F2B72C3F7054CD6487E75ED2E852BC19302D02C671FE
3892C7AF2A90D6F29771AF31FA95258B6F3434228B377F5FB494E28B5F0393C8
9DEA5E5726B81B7983D241BF7F78928EF8D8528C8F6DB7B307D720243DF00E84
A37A7B2C720348F83ACEFFA78929F4CFB5CCCCB2A074C78B92C8573750B91386
CECD4A1243D1B002B45B933534C0B4C51DDC50BE37BB6E42B8FFD25C9B6A4A80
0FDD3858D50F2166A9067E52D8B453FAE2DED99D96EF9523BD348F2C93DB66CD
B17BE44AE1E2031C3CB01E713C3B3CD4361048D12E21C486C25269C5BAF6F1D4
88A0C86DD17FBE4BF01A7ACD72008DA3EEB0BBE3611F26BD3145C75C837157BB
4F71361A279F53E8F1650875D2C78BAFD6B2FE27B6D4E5AC2018D482EC1B6B5D
77B4E31498CAC80323F512CC04F1ED6421BDD6E2223145BB57CB87C67462CE46
FB1F601245917A88EF37239AE1E09507A872672604F139C499CC23218FBBA217
4F6F41225FC094C1564E2626692F1C248D54C82E7BD92513D993FCFBEBC586BC
B872E666A060E4D9241802B7288B83F9F4F719812D43D78077BE30DC7DE3C5F3
E9D96DB240ED7408441F0A4027ADA78E407D0E670E2F2454556BF38810457178
95A4D934D52A8CA1EBC4E873BE93D96F6247837CF343EA1A99DDCEDEDCA227AD
3D8E6BB4888B0DA1AD0C362465D3C4E21CF96F924C0C2CEDB5D3FB56BBD867FF
33F81098A3F88158BE34D1EA916F0FA7D61E2C5607C2068D1CD4C3BBF919CEDA
96738DCE50C375304E863B1CAB3DC4FAF78594C0EA2E49DB5EF9087A8C5D1936
E0D4BBE7E85F075C23DC90A4157490ECFDAD8F8A00E390D5F613D6845F27270D
1AC39B9C484DBD68189FC5B788AE7EEA719CACD9FF24E65976588BA3E06B2D0B
C0BFF0189757C6AD574011A506759FFA82ACD5FD9DFA14F8C447A8FEE6269EC8
42FD49D239F423ADD062A3E41A59D3D39E805F92FD5323F4325092E72D2FE78C
70082F189031ACFB2CDD6F471B5FAEA379B9222DDA8C5F5441523824FC2094A9
BE45B2BB0D96B61F7606131C1B1FC0DDB714A7D541C94E8F4EAD86F289DDF8D9
8EAC048490072A67CB415716635B8576B27DB7F3E04085F55401E68A1A7307A9
8D6A6462B4C8F9BEB1A05B93C31B77AC5DAED5C57F294CC334D3A62F840CFA51
AE2E3B48C345996ED73767A2C06A11283437F2E781E948AE32AC9A2A0D26D7B7
085E74751DAD1038BBDE892F63DF8987D672CBCA219D2BB75FFA063599260B65
4CB34F836A47933E851C729D45F18F4E1E24A73FDCD1FED15B008E358D13F30F
8953726CABC016EB89B89998B98EBB37FF9A7CB583836311C53FED4AC8ACF589
3BBC85ADFAF0DA110DB04AE2C02738E9DC998D129C10B625C84535D7ED75C4EA
8DAC6C89B82BD1609DF1993520B467D79820F167001C831E072738D093C3672C
94025EC4AF01174CE4CD1747D12D505E46F640898650963817FDD4333191FD47
7A3673C776B9FEC00B6093C31DA33A33C0A52CA33F963CABEAFCE5DE02AF5B0A
DFA5FA4090AB3BC6CE314D9F6E24E15D0FA160FB5B221B653086C17291615F7D
19D527762A804B39899F425DA130430D1DE46B5633DC8AE812D2AF5C28C9FAE5
5D8160FDE680EBE8FC6480C52C9DB2BBEF30842714B916A7D8F5BE65A9007DA2
FA4F173F1419CDAE96B74CC8604B348AC317A17F2E6DEDF2B84E0378B104DC86
482CBC0FF2A6EB4A84159E1FBE8BAB72DC120969CAAF54CDF3D1BCFD759B6C86
AF19B3B687803B738A3FE25355F3482B977C90A2B4BAA68EE8DBE1157DD0B56C
10A61ACC9CB85DA25E6328FB6FAE9774ED3293AED45A8B4C8D30FE399257C067
E85367282AD5DB8A158063AE83DE11FFF1D03CB78885835F77C9CF8234F95840
89E5E650E94C059F94C4C7B2A6D3160AF77A1FD91B1A7A597BB2A7AEFE6F9923
088FD79430440137B9284BF904D0AB12309F483BA80EC3D9E58D6070B62CD065
E8D1E7D0BD60869BC208BEB8DD7EB918FE1FE5BB02DE5A1A36C07576343841CA
1CDFCB93AFEBDCF500014B56C762266C20A20E67EE49A1877BFFF356BB3C376C
0416F98998736528BCFBC99802C33C2FBEF40BC74415CBF152ABB8B14B5DD94F
CE0FB5C2898FD4B78861CD611F26060576D0E032DEEEEA3467DC056249F7A537
B44CFD148D60FA4DF62E26BA66E72A33D2305D532A69A115DB494ADA6ED9B856
D02EBE4C497DEFD6CEE6AF265AA57E0688B8E72428033E6B6B446E5ACA953BA2
FE49D6B48C0FF9FA470509140CBF5F561E004C329CB0B5FDCCB98D584351C606
97C4E520C682E1D5F650281BE52C8A82966A5053F54F4E8D18053351CD46B686
2B985A3620FC938DE5E0BA5B9A9DCB2052C7C7A20B02725893A94DAD8C53AA1E
94F3955700C92CB48B6BA16CBBD40DFFBFACE46CB78AC285BC7CAAA52E87F914
4264894B6D2A736AA0DA50C3FD59A3E6627CF61A993759DF48D2ECAAB5929B8A
699BCCC9EBD4D3BF59DF600611AEC60E4BA82598775A4F62C779676AFB486E7F
D785E43FAEC6D2EE7148705D137FC14B239DBF5D7DBBBCE39B25A459E12DBFF0
DA22D843D16773D7C1F40556489B66B74A5CEF20A5D617D3A4716D2FC8CAF064
930056FC60326C29E9B775BD7753151C42ECA9346503FDCC116F3C24D8450F58
4B0A0F3B704146222173CA5D622F4DB96F15F97D4541FAEECFE4EEA0EC254954
5128476A65C0256867446D7EEC83146D1AE475176DAE3798CC8A620C117CF018
A6E63311CEDEBEFC4E85B673228A5F3848661C04A33AD85CB032115C4729B951
CF1666C6E8402E3757C6C4FD28FC978417B6244C90CDECA26A1E5B1CFAF1E6F7
EBF70AD7DACACDC61A4445667B0E34E379A4115FFF6EE3069776CD805C93F667
D0242700DB500E16EEAAED1147C18F4386AF9DF8CFC116B21AB7676FE796D661
91DDC1B1AD0CBFF69A935F5BB489F758E1A3FC49919E8AED347AE20FBBC297B1
935ADDDAE70BDCA89A466BFF7ACB99903BD90FA59F596ED0A35C360AEDDC6AE1
95414DD3E85D585DB0CD118B8FED7A47AE33733A7BB981C45290C7D549075A70
8E62C32BFAD44FDC54E14BE40A5C62A320688EABF5C161FCAAE9773FF5FA9D87
44823BE16AEFF5BE3F846820E389D723EFCA33EEE51C25CA37510475471F516F
E49BEFCCB4E1259EFAD72C793A4EBB8A4FCE7137EC7D7179E43394F4AB9FEF61
553C477E0A602FE1736A446F830185DF3907504BFD781D32774CC23EDF536EDB
9E8F0C48E3FFCE7AC3D601F15BDD057099643D782D8EA73656D76D9C4B9BCD59
3D8D88006E4460C921A6DA26F68B014FBE60707CD16BB6556DC3F1401042AE9D
F37F51F57AF0EE4DF52C485DA15A3B4FC6DDE880D734E3891992870C46D7A0DC
EFB3A0E15274058AEBA1C523F4B47DF39017872045D3739EB811D773B475C03A
D5F4AE2ACA0D1AE48AED5D47CFBC65EA83D932DA96475C9E7A8BF2718FD1012E
D8472306F530775A41F5ECFB274AD4E521EE7DD776C4128B6DD3B28B97868D45
319297AAC80B589E5B287BB551AF37CF90D83025CA5A3BAD048442CCFDAD6629
44FF9F3F0175FD9480C3019BF27311ED16CCB0CB5D075AA1F24CE81DE94C026F
C78291F5B33CAC9D3CE871D29228B89BE230085BC72893BDC02F2680F7E9BB72
19B83C7F0DD201D74F192433AA1978775FC33B0B13B80E42C2D49D56B69CEB9F
D1FC2E1BF37F9B2A479A811FC02C3D729EB491906DB3A62D7CBB07061A525CF2
62FBA16E7F18F81041A1D61ABC05EA970F9A99BEDA4098C960F75D8F04B2CC6E
289273157F6615D882B74FF72E83B199944E8D722F6FD9272B6ED7F31A2535BA
F0751975BDFAC31712746E7FB4C77C8533BAA48F33B9E5E1C58B4E1C811C2279
5196CFB6E3AC166754EB8D15EBB8464FF4AD102D0E7B0ED2163060CA75837162
99B32D15AD3530FC48E2B2AE43AABE6FEEFB1E6DD1AB540511E4BE563E927F1D
2BDBF5F19CD9C81CB79FDF43EF4981C3A3E9544EA7E773049D632649A0409E01
87CF3176AD00B2CD9B72FB07261E2838B5C4F553C1AA3E3611D1177A41392CF3
F241A47A016C4CE23C7DE6FE5DEED1CDE6B46E48FB836BA35242544EA29B9CAB
51C523CED164E2DD780F56C5F81DB75FA6392D265307BE5BE306F3C6A9CDBB26
D142E0E220865DCBA42697CF45A8A0A531952A3D6791AFE304CA7B586F1968A3
84F9045A808DAF19EB06633BDB8C2F58EC85A45640FF672B0EA49DBF6B575B69
535BEF94348B1F504EAC429A627C96661A90FB0B25BD2561658A1BD1730F259E
6A069AF7488A43E362426FCEAB0DD16AA65E1D035382E4A3F4183F7F603AA0FB
AF392BB7D6AF16D47745664767A2C223F4C5B9E42CC6A22B23D2574425D43371
946D2D0FB40C8F2EB16609BF95F6327C785CA22B2DF629C40B816D9A05929CF5
CEBBC2CC17CD18D2157EFD1EFC83038765A8393D5398534372B6787F9C642559
E4873A422384697E2136EB325B17D84CF28A3938EDEEC93992F5912E22C36D19
30E637727C673E5B8C9C4630D54EBD075DBB63E1127200E428B5BEAE9F92C898
E5B269133A14A6D31C4214C3AAE585BB7E9E4D0EC57983CA5A3A1F0318F4BA08
4F42B7D2254136749D622884DADD712DBF17489653C9407BBFE9B6BB460E57CC
5970F41F349E226FC5584B9F52FA3A45BA203F43065A1D1CF44340A9C96649BD
6389F18036F8AC82D094CC6483184E687AD02C2883F246FDAD8CA89A34343CCE
F579C6F1B64FE796F19F5E5AA6A83E2DF236FFB1CCCE398F928701CAB9D39928
1390E520CEF18D77C934904D04419125DFEA708EAD9EFFC3C767ACA1CE240CE7
FC15100CB7AF4BF190DB0EFDCEC0453ED05186B080B2335C3C8E41E67978E209
D94E8EC87B985A299EA2C6F62AB2C3B9AF7AD18B012494F3087AE538A27DB892
693B96DCCD66F98888943DE9948D3AE141749B47B79951390EC0EF336153DC99
032A4447016B86A4EF94DEE9F50E42F5AEC5FD35DAAE940041DD8CF3600CBAE8
79DD0E395F791A6AFD9E17F738F1BACF915F8955B10426E974CB6E8515CF51EF
089A0C4B9AD1A3ACE2FF089A0A508954AB7FD159C42A3D91A08F38BE99CF62D8
0F426ABA3F0E35BF665AAE28C5BBA03CA8E0803450ECD9EE7E0BA98566902158
F4B66BFF25DB774EFD3AE4D7523D8C7498C0C99EA1DC757B365352526F12D028
C48DC4A18EE2F138B76621D65BF8427CD37E41457F129E2C8E089E6EAAA4350F
8B14DEC2A7089CD36B9D2B0473B104CAEDA78202B09795AA5D5E392F0700171D
9BC3C1F7B62862A066F84940CCBC2657E3974E96F4A32821058DD271E12C63B2
D2BD6C45D07F363EA37C8AC486E1F96248D2FDA15F1B28B8F8241C27FA684432
61453C26A141370CA486620A3F5776D49F64210A53B01D81401CFE900B029A58
0E73309C13E6D39549259DCC01DE2757A416EE2C69CC2B2D83ECA37A0D9E710C
39C3529A25E9C69D83D77EEF556056A2493B68F4E5FDC99AAA253F8ABF6EC7CB
77739A3360F91DDF860B25D2F3DB7F4804A4EAB2F7FC8FD018091A1D81006F5F
4CAACC3DE473E77E900597B6A153E62FD294DF7AE34DD8FE63B43F7BFD4B1B45
2D0C842E4A8B1AA257C2DEB9ED9F6CB50829C418872C93085C3204C6724E53C6
F1DFC45BE1A07E4E054182E4817442EF3D1FB32D5B2C4207CF84CEBF8D2D8E48
4346B16B2B7561180204865200974DF5E9A2137B1CB8EF5FD7E5081A85A41DC1
7FCB3A4FC88257FC95215D4F0DFFF8D09A31DE0B1765DE172D78018AB0495DCD
52C383C5448D28300200F8DE00480B9C4C22965F35EC17AF56DB7CD911C11763
C16B27EE928DDE324A1E356BEB75F128A73B338E4F5F07586B83F7CA02DB0875
EB7AA8736EE6E4E83B002DDE7E87AC9C6E72EE56CBFC58876E59F0B7563FDAC6
CC53B0B85D45CD39C22BFABEC76AFEE5037C8BFD7B68B888D86AED3A70D47666
482696092D21D2EB7D5FD0BC2BDDDE13A24A7FF3D2F1285B3A020A384FF4B7B1
7FC21D5FEDC48869CE314DADC6EAE0FE022796E62FB4E38872E9CF1D40A8531C
883398E1DD30083F5FBB76F099D890158FA28E0B44DBCB928FA2DE754F70EECF
B662A989626BC1BDB802E2BD94924312F3740E0B9CFF034401500B4F832813E9
C14E0DB89603767A45702DCCAADDE51C7A69160AEA049AD78B23AD62C5D016EF
4B68FE6C543B5F15FA831590F8F4B6F54833A9B8BE9D44A1A205C5536F2E4CC0
D7DAC2D6133048DD41B80EB566805BE148D6730D57D1E0B0CEFED219E3507EA6
D2EB7430D41369ADD2DE09F2F12C380157A844FA25A2B7EE5D80632B6CAB8F94
EBD6B5258F135EF91D3311373F6225A8FD651A084DFB952740F2CBAF69F77040
E3AE47F80B45A818BAD8480A7234FCBA57A2589B5EC80DA3009E956DD06EEEFE
62187F706F3C517205D8F611F56BEE7D1030A0584F29312751A9D85F97D842AD
10FD250167AB35AFCCC715C90D641889FC92D9280B8A1D644FBF257E8C372977
78D4D8A3C5E1D3AE104FB0C33E6DD3C0C090F69E591C39E4E3B5304C5C1D413B
45EB079707AEB19454FB28BBE6E2CEB2B0934EEFADCC2E39B72A45E0D1B22C73
EA3C460024349647E4BB41EAECF685FD56D2B1FE7568057AA9A9BC3D370686A3
266CF4D0989CA82ACFB8575DDAB8AF9358DFA5DD2DBF7EC45F90F70517217469
3C378297E9C3D928AB73972883079B79990FB922EBC84BFA04443334F20126B6
86CE3D07D375585777476DD812BDC235DBF84839F7FD2DAA205054EF3414C28A
F274A98C4F428B9EBFD57FE2EC3821978836BF0791135CEEBBE5F352EAC7BAC1
7D517811D224EC7292FF53ACFB9A7A5689119F02CF9A29B78195C7D5D12799DB
3B1B836F17357F0435BEEBBD318A9325A9215C2A5823AB9FF69ED0E5386DB813
E7140C3929AE86C1D76ECD703BB5B2209945B4AD0675A868D89C9E922C0A0043
C71E47C0598D4AAEDDBC7B3F97BEDC3824B25E385938BFA6D32FFF89A7D4995A
4A35108E6126503E5C6D326C4AC88625DA5D433FE21D4D2625E6461910767025
B2462AD478D8CD281AFEC25370135998BD5E9FF7F8FA056E4FA65EEBCC2FE90A
D2DDD3F015BF89A3570127785C69A3283A716902186FD5E3552E2BEFAEE34FB2
87835BFD1AF85DFBBB80D24293E3ECF03B4A258840A39400D714F5E0C5319059
0732A021BC63C2C9E5EFF94A571C1E7DAE09A59D0DEE39D2D90CB70BA56CBBC8
F89464115210E24F5B1CFF914F5130309232FF7B704DE03D820838C64B0C7579
66C5D37CE10386DC8469469F4D2A20BCD8C0B5B0C0CEA871B51BF5F15794092C
D42BAEC4CC7F1EDD5CB4F840580234C394E30E6E9B1C397B932737EE83D6C421
47A3D6785FC4A5CEA8E56C02C72E13688BC5DD7453BB32DE0AC3AEB85649947F
E6C3ACC2428DB27976906278130D6B149AB5E12EAAD0B82D357A614F7D0F67C5
DA7A987F76A3350C5C057E1E6CC59D16292215B8B301D2B0EF885550EF9029A3
FC2B4404EF5BB10B76651CC2D0E83DA869E8C202CB94B532DE66523CD36EE233
CF2810647622ABB356A5079970616A6D724F37D9068397B3907692EC61E70071
DF3174A08DBE242CCEA5177C24FA9578BF4F1325CB363443F03B57B243B5789C
78AC088D135DF12235EFFEBAD8697BA0E9A62D5AF6B69ABD9C5E8488BF3A2E3D
9E0B20380865EB74F3CFED7DE8ED090AB040CCE307D12E27BEB9CF530F82C2E9
16FB5EBE7F247476D37EC938068DC1A0855244C8F728C4D456A0CDD99272BA6B
8F465413A04D6259C6A14099AB76F3AAF02C84FC06A8ECE44199949AF13E053C
BC36700A7846607B2A50824F058CF4FAC2F052A879539F0E7277366DA151FC77
9BD574A5326C3BA239D987AD4962048EFCE62EE6A0F4B527A940C8C87BBCDB82
95B0103C89739344F213F710EE6E74A0112FF77135182A1549F1B3585920F71C
9EE717A9B5425838BABA8B714DD0B43D864F543751423B7831D0BAC3C236CF41
CF7DCF4A9CCE708B98623817A5CC8F637F4D494F2C057FA1D0D680DC2712BFBD
78C07D168D06C7C9229F849F05315F27C7B9C6D02BDA9818505617EE83F656DD
22A6478C0415D79A1A92290D0E4DC517A0639D08D0E37B09E0AA014B8D0E840E
68ACF691393EBC4A7C0ECB765A7462885A208B31FF1ED43A0879EAB63141080E
3F9E461B69EA1A65BD6A8BE10996922EAF0A2F992DA9618E89FFB7A22A7FFF04
1A1EEFD2F2CA1B43C05AFE2AE1A5295110E4DCA0C7795CA3296D4CBB5DAFE6CC
9C39AAFD1E200A529ABD609E295E47FD51CED68488A7BC1DA88A00A7779C1999
36A0FE45063379AEBCCD01902F7564FB55057C22E64635FA65CA03DA16EDB3D5
8F77C94970B9CD42336FE0A7E558330537A8B52C988A1DA0F829E26B6728DF9A
FC9D87B3903CED2666F6ACF7A40940F9EDCDECD6B5F690E31FE5E5847A977BAC
F29A58EB2E5840E94A88DDF782C4DF0A162C091E4F1871C838D51FE89626BB5D
3D5DDDF38A7DBC6DC4A27191CB95024F1B1708A11F2F6EFCD41285D8459EA2EB
35216893F4B6D97F87CDD473CB1AA529E09D262A84CB4B11B93DCEED4E725408
33EB4D0B46788CA46D755BCFC851B2770F5C659AA749187A8F8D7244906D259F
031D0EDB8ACE370D0FB58A5430BA96B3D686051EC34E5CD62CE1178080A4B6E3
A9A1704083D2EF7C05288846C91D023598E3FA1A05A217C060445574E1EF00C0
8EE214487346F336A1F02C9D5BF4F75ADB392E2341BC5735EF9EE3DBD2E92ED7
89E6F6867C46F561705D2E1CB0131081D38502C29A06B259B0FA845FC3F218D7
5A152AE12FF760AA9BB03D8F15347E3180B6E2CBFAACFD2780545F1AF53E963B
B8F2C3E88B82943B6DEFD6BE2A392E84F7280A23C5E8EB91E63AB05484D86C7C
A6217ECB29D7DBE23205AEBEC3EC168E43E9ED830843FDE22FA9241483BC1D7A
61980FFA57E52EC29FF6706226F354FC6CEB056DA1C2654369FFE81F2D2B52DB
55DA55D3A4EF87B015C1F20C493AFA1EE7B160A31DA82A4CDCCC912965F1E6B9
F303B9E9EB2577F5D540F8C051D57ABF154ADA6694005E15955661EBA4B45AD1
8FABECF6253EFE8C1F786E1A3E6922CBE2BC8651FEA4EACC9C59F6F61AFA0DC5
7B33F242167D7F8CBF4D5C76D6EB888ACCB6F2B6D7958F826543FCA9D7784DE8
E58CC35F8B8CD9146E8D2F62DC79DBD8AC3763E05D17272D08112901915FB5A9
97C3D5EC7E17128BBD72D9E6B0FF456E96B3C809417DC010D09D4220D578FAD4
7CCB8CA2FB131646BED8D2B9B711362B4AAF770BFF397D034492B2480E0D0D2D
A3326D85834A810679592CA930E162C5D78CDCAD7C8718710D2301F73F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (TableOfElements.dvi)
@start /Fa 137[103 1[83 87 77 2[114 116 179 53 2[53 116
1[69 106 116 101 116 108 12[151 3[145 2[202 7[133 1[145
25[88 88 63 39[{}24 206.559 /CMSSBX10 rf /Fb 169[90 12[37
6[90 90 7[67 67 67 67 67 67 67 67 67 67 48[{}14 143.462
/CMSS17 rf /Fc 138[67 48 50 45 67 67 66 67 104 1[63 2[67
66 40 61 67 1[67 63 11[91 1[73 84 1[84 1[95 117 69 3[95
1[73 77 95 84 88 88 19[44 45[{}32 119.552 /CMSSBX10 rf
/Fd 134[72 3[80 58 60 53 2[79 80 124 37 2[37 80 79 48
73 80 70 80 75 6[96 105 105 149 105 110 105 88 101 1[101
114 114 140 83 110 1[47 114 105 88 92 114 101 105 105
19[53 45[{}43 143.462 /CMSSBX10 rf /Fe 134[38 38 57 38
43 30 32 28 43 43 42 43 66 20 41 1[20 43 42 25 37 43
37 43 40 6[51 55 55 1[55 57 57 46 54 1[53 61 59 73 45
58 1[23 59 55 47 50 60 53 55 55 7[42 42 42 42 42 42 42
42 42 42 42 23 28 45[{}60 83.022 /CMSS10 rf /Ff 165[56
32[46 46 46 46 46 46 46 46 46 46 2[30 45[{}12 83.022
/CMSSBX10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop
-32891 -32891 32891 32891 23376385 0 42298206
 240 -2714 a

 240 -2714 a 240 -2714
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 17.53946 17.53946 moveto

 -17.53946 17.53946 lineto

 -17.53946 -17.53944 lineto

 17.53946 -17.53944 lineto

 closepath

 -17.53946 -17.53944 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 -14.77875 -1.12079 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(1)243 b Fe(1.0079)443 -2714 y Fd(H)334
-2515 y Fe(Hydrogen)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 0.45 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 0.45 1 setrgbcolor}def

 17.53946 -17.53946 moveto

 -17.53946 -17.53946 lineto

 -17.53946 -52.6184 lineto

 17.53946 -52.6184 lineto

 closepath

 -17.53946 -52.6184 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 -14.77875 -36.19974 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(3)285
b Fe(6.941)440 -2706 y Fd(Li)367 -2507 y Fe(Lithium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 0.45 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 0.45 1 setrgbcolor}def

 17.53946 -52.61852 moveto

 -17.53946 -52.61852 lineto

 -17.53946 -87.69743 lineto

 17.53946 -87.69743 lineto

 closepath

 -17.53946 -87.69743 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 -14.77875 -71.27878 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(11)197 b Fe(22.990)405 -2706 y
Fd(Na)369 -2507 y Fe(So)r(dium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 0.45 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 0.45 1 setrgbcolor}def

 17.53946 -87.69766 moveto

 -17.53946 -87.69766 lineto

 -17.53946 -122.7766 lineto

 17.53946 -122.7766 lineto

 closepath

 -17.53946 -122.7766 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 -14.77875 -106.35794 ] concat

 pgfs



 0 setgray
 240 -2905
a Ff(19)g Fe(39.098)445 -2706 y Fd(K)323 -2507 y Fe(P)n(otassium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 0.45 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 0.45 1 setrgbcolor}def

 17.53946 -122.77693 moveto

 -17.53946 -122.77693 lineto

 -17.53946 -157.85587 lineto

 17.53946 -157.85587 lineto

 closepath

 -17.53946 -157.85587 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 -14.77875 -141.43721 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(37)g Fe(85.468)409 -2706 y Fd(Rb)335
-2507 y Fe(Rubidium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 0.45 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 0.45 1 setrgbcolor}def

 17.53946 -157.85631 moveto

 -17.53946 -157.85631 lineto

 -17.53946 -192.93523 lineto

 17.53946 -192.93523 lineto

 closepath

 -17.53946 -192.93523 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 -14.77875 -176.51657 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(55)g Fe(132.91)419
-2706 y Fd(Cs)355 -2507 y Fe(Caesium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 0.45 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 0.45 1 setrgbcolor}def

 17.53946 -192.93578 moveto

 -17.53946 -192.93578 lineto

 -17.53946 -228.01471 lineto

 17.53946 -228.01471 lineto

 closepath

 -17.53946 -228.01471 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 -14.77875 -211.59605 ] concat

 pgfs



 0 setgray
 240
-2905 a Ff(87)303 b Fe(223)431 -2706 y Fd(F)l(r)339 -2507
y Fe(F)n(rancium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 0.6 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 0.6 1 setrgbcolor}def

 52.61841 -17.53958 moveto

 17.53947 -17.53958 lineto

 17.53947 -52.6185 lineto

 52.61841 -52.6185 lineto

 closepath

 17.53947 -52.6185 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 20.30019 -36.19984 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(4)243 b Fe(9.0122)411
-2714 y Fd(Be)336 -2515 y Fe(Beryllium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 0.6 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 0.6 1 setrgbcolor}def

 52.61852 -52.61862 moveto

 17.53958 -52.61862 lineto

 17.53958 -87.69753 lineto

 52.61852 -87.69753 lineto

 closepath

 17.53958 -87.69753 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 20.3003 -71.27887 ] concat

 pgfs



 0 setgray
 240
-2913 a Ff(12)197 b Fe(24.305)389 -2714 y Fd(Mg)303 -2515
y Fe(Magnesium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 0.6 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 0.6 1 setrgbcolor}def

 52.6186 -87.69775 moveto

 17.53967 -87.69775 lineto

 17.53967 -122.77669 lineto

 52.6186 -122.77669 lineto

 closepath

 17.53967 -122.77669 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 20.30038 -106.35803 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(20)g Fe(40.078)412
-2706 y Fd(Ca)361 -2507 y Fe(Calcium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 0.6 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 0.6 1 setrgbcolor}def

 52.61871 -122.77702 moveto

 17.53978 -122.77702 lineto

 17.53978 -157.85596 lineto

 52.61871 -157.85596 lineto

 closepath

 17.53978 -157.85596 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 20.30049 -141.4373 ] concat

 pgfs



 0 setgray
 240
-2905 a Ff(38)239 b Fe(87.62)428 -2706 y Fd(Sr)326 -2507
y Fe(Strontium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 0.6 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 0.6 1 setrgbcolor}def

 52.6188 -157.8564 moveto

 17.53987 -157.8564 lineto

 17.53987 -192.93532 lineto

 52.6188 -192.93532 lineto

 closepath

 17.53987 -192.93532 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 20.30058 -176.51666 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(56)197 b Fe(137.33)410
-2706 y Fd(Ba)375 -2507 y Fe(Ba)n(rium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 0.6 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 0.6 1 setrgbcolor}def

 52.6189 -192.93587 moveto

 17.53996 -192.93587 lineto

 17.53996 -228.0148 lineto

 52.6189 -228.0148 lineto

 closepath

 17.53996 -228.0148 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 20.30067 -211.59615 ] concat

 pgfs



 0 setgray
 240
-2905 a Ff(88)303 b Fe(226)412 -2706 y Fd(Ra)368 -2507
y Fe(Radium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 87.69765 -87.69807 moveto

 52.61873 -87.69807 lineto

 52.61873 -122.77701 lineto

 87.69765 -122.77701 lineto

 closepath

 52.61873 -122.77701 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 55.37943 -106.35835 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(21)197 b Fe(44.956)421
-2706 y Fd(Sc)331 -2507 y Fe(Scandium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 87.69786 -122.77734 moveto

 52.61893 -122.77734 lineto

 52.61893 -157.85628 lineto

 87.69786 -157.85628 lineto

 closepath

 52.61893 -157.85628 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 55.37964 -141.43762 ] concat

 pgfs



 0 setgray
 240
-2905 a Ff(39)g Fe(88.906)445 -2706 y Fd(Y)364 -2507
y Fe(Yttrium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 87.69807 -157.85672 moveto

 52.61914 -157.85672 lineto

 52.61914 -192.93564 lineto

 87.69807 -192.93564 lineto

 closepath

 52.61914 -192.93564 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 55.37985 -176.51698 ] concat

 pgfs



 0 setgray
 380 -2905 a Ff(57-71)313 -2706
y Fd(La-Lu)309 -2507 y Fe(Lanthanide)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 87.69829 -192.93619 moveto

 52.61935 -192.93619 lineto

 52.61935 -228.01512 lineto

 87.69829 -228.01512 lineto

 closepath

 52.61935 -228.01512 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 55.38007 -211.59647 ] concat

 pgfs



 0 setgray
 357
-2905 a Ff(89-103)317 -2706 y Fd(Ac-Lr)358 -2507 y Fe(Actinide)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 122.77681 -87.6984 moveto

 87.69788 -87.6984 lineto

 87.69788 -122.77733 lineto

 122.77681 -122.77733 lineto

 closepath

 87.69788 -122.77733 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 90.45859 -106.35867 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(22)g Fe(47.867)429 -2706 y Fd(Ti)341
-2507 y Fe(Titanium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 122.77713 -122.77766 moveto

 87.6982 -122.77766 lineto

 87.6982 -157.8566 lineto

 122.77713 -157.8566 lineto

 closepath

 87.6982 -157.8566 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 90.45891 -141.43794 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(40)g Fe(91.224)424
-2706 y Fd(Zr)326 -2507 y Fe(Zirconium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 122.77745 -157.85703 moveto

 87.69852 -157.85703 lineto

 87.69852 -192.93596 lineto

 122.77745 -192.93596 lineto

 closepath

 87.69852 -192.93596 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 90.45923 -176.5173 ] concat

 pgfs



 0 setgray
 240
-2905 a Ff(72)g Fe(178.49)413 -2706 y Fd(Hf)342 -2507
y Fe(Halfnium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 122.77777 -192.93652 moveto

 87.69884 -192.93652 lineto

 87.69884 -228.01546 lineto

 122.77777 -228.01546 lineto

 closepath

 87.69884 -228.01546 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 90.45955 -211.5968 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(104)257 b Fe(261)438
-2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 438 -2706 a Fc(Rf)562 -2706 y
/show /tx@CharPathSavedShow load def
 562 -2706 a 562
-2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 562 -2706 a 250 -2507 a Fe(Rutherfo)n(rdium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 157.85608 -87.69872 moveto

 122.77715 -87.69872 lineto

 122.77715 -122.77765 lineto

 157.85608 -122.77765 lineto

 closepath

 122.77715 -122.77765 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 125.53786 -106.359 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(23)197 b Fe(50.942)446 -2706 y
Fd(V)326 -2507 y Fe(V)n(anadium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 157.8565 -122.77798 moveto

 122.77757 -122.77798 lineto

 122.77757 -157.8569 lineto

 157.8565 -157.8569 lineto

 closepath

 122.77757 -157.8569 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 125.53828 -141.43826 ] concat

 pgfs



 0 setgray
 240 -2905
a Ff(41)g Fe(92.906)403 -2706 y Fd(Nb)354 -2507 y Fe(Niobium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 157.85692 -157.85735 moveto

 122.778 -157.85735 lineto

 122.778 -192.93628 lineto

 157.85692 -192.93628 lineto

 closepath

 122.778 -192.93628 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 125.53871 -176.51762 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(73)g Fe(180.95)416 -2706 y Fd(T)-13
b(a)335 -2507 y Fe(T)-7 b(antalum)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 157.85735 -192.93683 moveto

 122.77843 -192.93683 lineto

 122.77843 -228.01576 lineto

 157.85735 -228.01576 lineto

 closepath

 122.77843 -228.01576 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 125.53912 -211.5971 ] concat

 pgfs



 0 setgray
 240 -2905
a Ff(105)257 b Fe(262)419 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 419 -2706 a Fc(Db)581
-2706 y
/show /tx@CharPathSavedShow load def
 581 -2706 a 581 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 581 -2706 a 341 -2507
a Fe(Dubnium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 192.93544 -87.69904 moveto

 157.85652 -87.69904 lineto

 157.85652 -122.77797 lineto

 192.93544 -122.77797 lineto

 closepath

 157.85652 -122.77797 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 160.61722 -106.35931 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(24)197 b Fe(51.996)422
-2706 y Fd(Cr)320 -2507 y Fe(Chromium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 192.93599 -122.77832 moveto

 157.85706 -122.77832 lineto

 157.85706 -157.85722 lineto

 192.93599 -157.85722 lineto

 closepath

 157.85706 -157.85722 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 160.61777 -141.43858 ] concat

 pgfs



 0 setgray
 240
-2913 a Ff(42)239 b Fe(95.94)390 -2714 y Fd(Mo)276 -2515
y Fe(Molyb)r(denum)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 192.93654 -157.85768 moveto

 157.8576 -157.85768 lineto

 157.8576 -192.9366 lineto

 192.93654 -192.9366 lineto

 closepath

 157.8576 -192.9366 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 160.61832 -176.51794 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(74)197
b Fe(183.84)424 -2714 y Fd(W)341 -2515 y Fe(T)-7 b(ungsten)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 192.93709 -192.93716 moveto

 157.85815 -192.93716 lineto

 157.85815 -228.01608 lineto

 192.93709 -228.01608 lineto

 closepath

 157.85815 -228.01608 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 160.61887 -211.59743 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(106)257 b Fe(266)431 -2714 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 431
-2714 a Fc(Sg)569 -2714 y
/show /tx@CharPathSavedShow load def
 569 -2714 a 569 -2714 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 569
-2714 a 297 -2515 a Fe(Seab)r(o)n(rgium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 228.01494 -87.69937 moveto

 192.936 -87.69937 lineto

 192.936 -122.77829 lineto

 228.01494 -122.77829 lineto

 closepath

 192.936 -122.77829 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 195.69672 -106.35963 ] concat

 pgfs



 0 setgray
 240
-2913 a Ff(25)197 b Fe(54.938)390 -2714 y Fd(Mn)307 -2515
y Fe(Manganese)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 228.0156 -122.77863 moveto

 192.93666 -122.77863 lineto

 192.93666 -157.85754 lineto

 228.0156 -157.85754 lineto

 closepath

 192.93666 -157.85754 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 195.69737 -141.43889 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(43)345 b Fe(96)412
-2706 y Fd(Tc)298 -2507 y Fe(T)-7 b(echnetium)240 -2714
y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 228.01625 -157.85799 moveto

 192.93732 -157.85799 lineto

 192.93732 -192.93692 lineto

 228.01625 -192.93692 lineto

 closepath

 192.93732 -192.93692 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 195.69803 -176.51826 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(75)197 b Fe(186.21)413 -2706 y Fd(Re)348
-2507 y Fe(Rhenium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 228.01689 -192.93748 moveto

 192.93797 -192.93748 lineto

 192.93797 -228.01642 lineto

 228.01689 -228.01642 lineto

 closepath

 192.93797 -228.01642 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 195.69868 -211.59776 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(107)257
b Fe(264)423 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 423 -2706 a Fc(Bh)577 -2706 y
/show /tx@CharPathSavedShow load def
 577
-2706 a 577 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 577 -2706 a 352 -2507 a Fe(Bohrium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 263.09454 -87.69968 moveto

 228.01561 -87.69968 lineto

 228.01561 -122.77861 lineto

 263.09454 -122.77861 lineto

 closepath

 228.01561 -122.77861 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 230.77632 -106.35995 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(26)197 b Fe(55.845)422 -2706 y
Fd(F)l(e)432 -2507 y Fe(Iron)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 263.09529 -122.77893 moveto

 228.01637 -122.77893 lineto

 228.01637 -157.85786 lineto

 263.09529 -157.85786 lineto

 closepath

 228.01637 -157.85786 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 230.77707 -141.43921 ] concat

 pgfs



 0 setgray
 240 -2905 a
Ff(44)g Fe(101.07)409 -2706 y Fd(Ru)311 -2507 y Fe(Ruthenium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 263.09605 -157.8583 moveto

 228.01712 -157.8583 lineto

 228.01712 -192.93724 lineto

 263.09605 -192.93724 lineto

 closepath

 228.01712 -192.93724 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 230.77783 -176.51859 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(76)g Fe(190.23)413 -2706 y Fd(Os)356
-2507 y Fe(Osmium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 263.09682 -192.93779 moveto

 228.01788 -192.93779 lineto

 228.01788 -228.01672 lineto

 263.09682 -228.01672 lineto

 closepath

 228.01788 -228.01672 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 230.7786 -211.59807 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(108)257
b Fe(277)427 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 427 -2706 a Fc(Hs)573 -2706 y
/show /tx@CharPathSavedShow load def
 573
-2706 a 573 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 573 -2706 a 355 -2507 a Fe(Hassium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 298.17424 -87.7 moveto

 263.0953 -87.7 lineto

 263.0953 -122.77892 lineto

 298.17424 -122.77892 lineto

 closepath

 263.0953 -122.77892 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 265.85602 -106.36028 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(27)197 b Fe(58.933)410 -2706 y
Fd(Co)386 -2507 y Fe(Cobalt)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 298.17511 -122.77925 moveto

 263.09618 -122.77925 lineto

 263.09618 -157.85818 lineto

 298.17511 -157.85818 lineto

 closepath

 263.09618 -157.85818 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 265.85689 -141.43953 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(45)g
Fe(102.91)409 -2706 y Fd(Rh)344 -2507 y Fe(Rho)r(dium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 298.17598 -157.85863 moveto

 263.09705 -157.85863 lineto

 263.09705 -192.93756 lineto

 298.17598 -192.93756 lineto

 closepath

 263.09705 -192.93756 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 265.85776 -176.5189 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(77)g Fe(192.22)449 -2706 y Fd(Ir)379
-2507 y Fe(Iridium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 298.17683 -192.93811 moveto

 263.09792 -192.93811 lineto

 263.09792 -228.01703 lineto

 298.17683 -228.01703 lineto

 closepath

 263.09792 -228.01703 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 265.85863 -211.59839 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(109)257
b Fe(268)417 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 417 -2706 a Fc(Mt)583 -2706 y
/show /tx@CharPathSavedShow load def
 583
-2706 a 583 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 583 -2706 a 302 -2507 a Fe(Meitnerium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 333.25406 -87.70032 moveto

 298.17513 -87.70032 lineto

 298.17513 -122.77924 lineto

 333.25406 -122.77924 lineto

 closepath

 298.17513 -122.77924 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 300.93584 -106.3606 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(28)197 b Fe(58.693)425 -2706 y
Fd(Ni)395 -2507 y Fe(Nick)n(el)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 333.25502 -122.77957 moveto

 298.1761 -122.77957 lineto

 298.1761 -157.8585 lineto

 333.25502 -157.8585 lineto

 closepath

 298.1761 -157.8585 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 300.93681 -141.43985 ] concat

 pgfs



 0 setgray
 240 -2905
a Ff(46)g Fe(106.42)409 -2706 y Fd(Pd)329 -2507 y Fe(P)n(alladium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 333.256 -157.85895 moveto

 298.17706 -157.85895 lineto

 298.17706 -192.93788 lineto

 333.256 -192.93788 lineto

 closepath

 298.17706 -192.93788 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 300.93777 -176.51923 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(78)g Fe(195.08)421 -2706 y Fd(Pt)343
-2507 y Fe(Platinum)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 333.25697 -192.93845 moveto

 298.17804 -192.93845 lineto

 298.17804 -228.01736 lineto

 333.25697 -228.01736 lineto

 closepath

 298.17804 -228.01736 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 300.93875 -211.59871 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(110)257
b Fe(281)427 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 427 -2706 a Fc(Ds)573 -2706 y
/show /tx@CharPathSavedShow load def
 573
-2706 a 573 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 573 -2706 a 252 -2507 a Fe(Da)n(rmstadtium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 368.33397 -87.70065 moveto

 333.25504 -87.70065 lineto

 333.25504 -122.77956 lineto

 368.33397 -122.77956 lineto

 closepath

 333.25504 -122.77956 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 336.01575 -106.3609 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(29)197 b Fe(63.546)409 -2714 y
Fd(Cu)376 -2515 y Fe(Copp)r(er)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 368.33505 -122.77989 moveto

 333.25612 -122.77989 lineto

 333.25612 -157.85883 lineto

 368.33505 -157.85883 lineto

 closepath

 333.25612 -157.85883 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 336.01683 -141.44017 ] concat

 pgfs



 0 setgray
 240 -2905
a Ff(47)g Fe(107.87)407 -2706 y Fd(Ag)405 -2507 y Fe(Silver)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 368.33615 -157.85927 moveto

 333.25722 -157.85927 lineto

 333.25722 -192.9382 lineto

 368.33615 -192.9382 lineto

 closepath

 333.25722 -192.9382 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 336.01793 -176.51955 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(79)g Fe(196.97)407 -2706 y Fd(Au)420
-2507 y Fe(Gold)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 368.33723 -192.93877 moveto

 333.25832 -192.93877 lineto

 333.25832 -228.01767 lineto

 368.33723 -228.01767 lineto

 closepath

 333.25832 -228.01767 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 336.01901 -211.59901 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(111)257 b
Fe(280)425 -2714 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 425 -2714 a Fc(Rg)575 -2714 y
/show /tx@CharPathSavedShow load def
 575
-2714 a 575 -2714 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 575 -2714 a 271 -2515 a Fe(Ro)r(entgenium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 403.414 -87.70094 moveto

 368.33507 -87.70094 lineto

 368.33507 -122.77988 lineto

 403.414 -122.77988 lineto

 closepath

 368.33507 -122.77988 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 371.09578 -106.36122 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(30)239 b Fe(65.39)412 -2706 y
Fd(Zn)425 -2507 y Fe(Zinc)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 403.41519 -122.78021 moveto

 368.33627 -122.78021 lineto

 368.33627 -157.85915 lineto

 403.41519 -157.85915 lineto

 closepath

 368.33627 -157.85915 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 371.09697 -141.44049 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(48)197
b Fe(112.41)409 -2706 y Fd(Cd)335 -2507 y Fe(Cadmium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 403.4164 -157.8596 moveto

 368.33746 -157.8596 lineto

 368.33746 -192.93852 lineto

 403.4164 -192.93852 lineto

 closepath

 368.33746 -192.93852 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 371.09818 -176.51987 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(80)g Fe(200.59)403 -2714 y Fd(Hg)358
-2515 y Fe(Mercury)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 403.4176 -192.93906 moveto

 368.33867 -192.93906 lineto

 368.33867 -228.01799 lineto

 403.4176 -228.01799 lineto

 closepath

 368.33867 -228.01799 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 371.09938 -211.59933 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(112)257
b Fe(285)387 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 387 -2706 a Fc(Uub)613 -2706 y
/show /tx@CharPathSavedShow load def
 613
-2706 a 613 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 613 -2706 a 321 -2507 a Fe(Ununbium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 438.49414 -87.70126 moveto

 403.4152 -87.70126 lineto

 403.4152 -122.7802 lineto

 438.49414 -122.7802 lineto

 closepath

 403.4152 -122.7802 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 406.17592 -106.36154 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(31)197 b Fe(69.723)410 -2706 y
Fd(Ga)368 -2507 y Fe(Gallium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 438.49545 -52.62265 moveto

 403.41652 -52.62265 lineto

 403.41652 -87.70157 lineto

 438.49545 -87.70157 lineto

 closepath

 403.41652 -87.70157 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 406.17723 -71.28291 ] concat

 pgfs



 0 setgray
 240 -2905 a
Ff(13)g Fe(26.982)429 -2706 y Fd(Al)312 -2507 y Fe(Aluminium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 0.875 0.75 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 0.875 0.75 setrgbcolor}def

 438.49675 -17.54391 moveto

 403.41783 -17.54391 lineto

 403.41783 -52.62285 lineto

 438.49675 -52.62285 lineto

 closepath

 403.41783 -52.62285 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 406.17854 -36.2042 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(5)243 b Fe(10.811)447 -2706 y
Fd(B)396 -2507 y Fe(Bo)n(ron)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 438.49545 -122.78053 moveto

 403.41652 -122.78053 lineto

 403.41652 -157.85947 lineto

 438.49545 -157.85947 lineto

 closepath

 403.41652 -157.85947 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 406.17723 -141.44081 ] concat

 pgfs



 0 setgray
 240 -2905 a
Ff(49)197 b Fe(114.82)436 -2706 y Fd(In)381 -2507 y Fe(Indium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 438.49675 -157.85991 moveto

 403.41783 -157.85991 lineto

 403.41783 -192.93883 lineto

 438.49675 -192.93883 lineto

 closepath

 403.41783 -192.93883 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 406.17854 -176.52019 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(81)g Fe(204.38)429 -2706 y Fd(Tl)346
-2507 y Fe(Thallium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 438.49806 -192.93939 moveto

 403.41913 -192.93939 lineto

 403.41913 -228.01833 lineto

 438.49806 -228.01833 lineto

 closepath

 403.41913 -228.01833 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 406.17984 -211.59967 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(113)257
b Fe(284)397 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 397 -2706 a Fc(Uut)603 -2706 y
/show /tx@CharPathSavedShow load def
 603
-2706 a 603 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 603 -2706 a 314 -2507 a Fe(Ununtrium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 1 0.75 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 1 0.75 setrgbcolor}def

 473.57701 -17.54402 moveto

 438.49808 -17.54402 lineto

 438.49808 -52.62296 lineto

 473.57701 -52.62296 lineto

 closepath

 438.49808 -52.62296 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 441.25879 -36.2043 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(6)243 b Fe(12.011)450 -2706 y
Fd(C)376 -2507 y Fe(Ca)n(rb)r(on)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 0.875 0.75 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 0.875 0.75 setrgbcolor}def

 473.57845 -52.62305 moveto

 438.49951 -52.62305 lineto

 438.49951 -87.70198 lineto

 473.57845 -87.70198 lineto

 closepath

 438.49951 -87.70198 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 441.26022 -71.28333 ] concat

 pgfs



 0 setgray
 240 -2905
a Ff(14)197 b Fe(28.086)438 -2706 y Fd(Si)387 -2507 y
Fe(Silicon)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 0.875 0.75 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 0.875 0.75 setrgbcolor}def

 473.57986 -87.70221 moveto

 438.50093 -87.70221 lineto

 438.50093 -122.78114 lineto

 473.57986 -122.78114 lineto

 closepath

 438.50093 -122.78114 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 441.26164 -106.36249 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(32)239 b Fe(72.64)411
-2706 y Fd(Ge)301 -2507 y Fe(Germanium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 473.58128 -122.78148 moveto

 438.50235 -122.78148 lineto

 438.50235 -157.86041 lineto

 473.58128 -157.86041 lineto

 closepath

 438.50235 -157.86041 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 441.26306 -141.44176 ] concat

 pgfs



 0 setgray
 240
-2905 a Ff(50)197 b Fe(118.71)416 -2706 y Fd(Sn)440 -2507
y Fe(Tin)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 473.58269 -157.86086 moveto

 438.50377 -157.86086 lineto

 438.50377 -192.93977 lineto

 473.58269 -192.93977 lineto

 closepath

 438.50377 -192.93977 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 441.26448 -176.52112 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(82)239 b Fe(207.2)409
-2706 y Fd(Pb)418 -2507 y Fe(Lead)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 473.5841 -192.94034 moveto

 438.50517 -192.94034 lineto

 438.50517 -228.01926 lineto

 473.5841 -228.01926 lineto

 closepath

 438.50517 -228.01926 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 441.26588 -211.6006 ] concat

 pgfs



 0 setgray
 240 -2913
a Ff(114)257 b Fe(289)387 -2714 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 387 -2714 a Fc(Uuq)613
-2714 y
/show /tx@CharPathSavedShow load def
 613 -2714 a 613 -2714 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 613 -2714 a 258 -2515
a Fe(Ununquadium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 1 0.75 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 1 0.75 setrgbcolor}def

 508.65738 -17.54413 moveto

 473.57846 -17.54413 lineto

 473.57846 -52.62303 lineto

 508.65738 -52.62303 lineto

 closepath

 473.57846 -52.62303 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 476.33916 -36.20439 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(7)243 b Fe(14.007)443
-2714 y Fd(N)350 -2515 y Fe(Nitrogen)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 1 0.75 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 1 0.75 setrgbcolor}def

 508.65892 -52.62317 moveto

 473.57999 -52.62317 lineto

 473.57999 -87.70209 lineto

 508.65892 -87.70209 lineto

 closepath

 473.57999 -87.70209 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 476.3407 -71.28343 ] concat

 pgfs



 0 setgray
 240
-2913 a Ff(15)197 b Fe(30.974)450 -2714 y Fd(P)301 -2515
y Fe(Phospho)n(rus)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 0.875 0.75 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 0.875 0.75 setrgbcolor}def

 508.66046 -87.70232 moveto

 473.58153 -87.70232 lineto

 473.58153 -122.78125 lineto

 508.66046 -122.78125 lineto

 closepath

 473.58153 -122.78125 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 476.34224 -106.3626 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(33)g Fe(74.922)417
-2706 y Fd(As)374 -2507 y Fe(Arsenic)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 0.875 0.75 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 0.875 0.75 setrgbcolor}def

 508.66199 -122.7816 moveto

 473.58305 -122.7816 lineto

 473.58305 -157.86052 lineto

 508.66199 -157.86052 lineto

 closepath

 473.58305 -157.86052 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 476.34377 -141.44186 ] concat

 pgfs



 0 setgray
 240
-2913 a Ff(51)g Fe(121.76)416 -2714 y Fd(Sb)332 -2515
y Fe(Antimony)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 508.66353 -157.86095 moveto

 473.5846 -157.86095 lineto

 473.5846 -192.93988 lineto

 508.66353 -192.93988 lineto

 closepath

 473.5846 -192.93988 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 476.3453 -176.52122 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(83)g Fe(208.98)429
-2706 y Fd(Bi)356 -2507 y Fe(Bismuth)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 508.66505 -192.94044 moveto

 473.58614 -192.94044 lineto

 473.58614 -228.01936 lineto

 508.66505 -228.01936 lineto

 closepath

 473.58614 -228.01936 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 476.34685 -211.60071 ] concat

 pgfs



 0 setgray
 240
-2913 a Ff(115)257 b Fe(288)387 -2714 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 387 -2714 a Fc(Uup)613
-2714 y
/show /tx@CharPathSavedShow load def
 613 -2714 a 613 -2714 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 613 -2714 a 265 -2515
a Fe(Ununp)r(entium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 1 0.75 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 1 0.75 setrgbcolor}def

 543.73787 -17.54424 moveto

 508.65894 -17.54424 lineto

 508.65894 -52.62314 lineto

 543.73787 -52.62314 lineto

 closepath

 508.65894 -52.62314 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 511.41965 -36.2045 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(8)243
b Fe(15.999)443 -2714 y Fd(O)371 -2515 y Fe(Oxygen)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 1 0.75 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 1 0.75 setrgbcolor}def

 543.7395 -52.62326 moveto

 508.66057 -52.62326 lineto

 508.66057 -87.70218 lineto

 543.7395 -87.70218 lineto

 closepath

 508.66057 -87.70218 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 511.42128 -71.28352 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(16)197 b Fe(32.065)456 -2714 y
Fd(S)367 -2515 y Fe(Sulphur)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 1 0.75 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 1 0.75 setrgbcolor}def

 543.74115 -87.70241 moveto

 508.66222 -87.70241 lineto

 508.66222 -122.78134 lineto

 543.74115 -122.78134 lineto

 closepath

 508.66222 -122.78134 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 511.42293 -106.36269 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(34)239
b Fe(78.96)420 -2706 y Fd(Se)344 -2507 y Fe(Selenium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 0.875 0.75 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 0.875 0.75 setrgbcolor}def

 543.74278 -122.78168 moveto

 508.66386 -122.78168 lineto

 508.66386 -157.86061 lineto

 543.74278 -157.86061 lineto

 closepath

 508.66386 -157.86061 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 511.42458 -141.44196 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(52)g Fe(127.6)417 -2706 y Fd(T)-13
b(e)337 -2507 y Fe(T)-7 b(ellurium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 0.875 0.75 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 0.875 0.75 setrgbcolor}def

 543.74443 -157.86104 moveto

 508.6655 -157.86104 lineto

 508.6655 -192.93997 lineto

 543.74443 -192.93997 lineto

 closepath

 508.6655 -192.93997 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 511.42621 -176.52132 ] concat

 pgfs



 0 setgray
 240 -2905
a Ff(84)303 b Fe(209)412 -2706 y Fd(P)l(o)337 -2507 y
Fe(P)n(olonium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 0.75 1 setrgbcolor}def

 543.74608 -192.94052 moveto

 508.66714 -192.94052 lineto

 508.66714 -228.01945 lineto

 543.74608 -228.01945 lineto

 closepath

 508.66714 -228.01945 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 511.42786 -211.6008 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(116)257 b Fe(293)387
-2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 387 -2706 a Fc(Uuh)613 -2706 y
/show /tx@CharPathSavedShow load def
 613 -2706 a 613
-2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 613 -2706 a 284 -2507 a Fe(Ununhexium)240 -2714
y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 1 0.6 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 1 0.6 setrgbcolor}def

 578.81845 -17.54431 moveto

 543.73952 -17.54431 lineto

 543.73952 -52.62323 lineto

 578.81845 -52.62323 lineto

 closepath

 543.73952 -52.62323 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 546.50023 -36.20459 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(9)243 b Fe(18.998)456 -2706 y Fd(F)360
-2507 y Fe(Flourine)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 1 0.6 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 1 0.6 setrgbcolor}def

 578.8202 -52.62335 moveto

 543.74127 -52.62335 lineto

 543.74127 -87.70229 lineto

 578.8202 -87.70229 lineto

 closepath

 543.74127 -87.70229 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 546.50198 -71.28363 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(17)197
b Fe(35.453)431 -2706 y Fd(Cl)359 -2507 y Fe(Chlo)n(rine)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 1 0.6 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 1 0.6 setrgbcolor}def

 578.82195 -87.70251 moveto

 543.74301 -87.70251 lineto

 543.74301 -122.78145 lineto

 578.82195 -122.78145 lineto

 closepath

 543.74301 -122.78145 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 546.50372 -106.3628 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(35)g Fe(79.904)420 -2706 y Fd(Br)355
-2507 y Fe(Bromine)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 1 0.6 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 1 0.6 setrgbcolor}def

 578.8237 -122.78178 moveto

 543.74477 -122.78178 lineto

 543.74477 -157.86072 lineto

 578.8237 -157.86072 lineto

 closepath

 543.74477 -157.86072 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 546.50548 -141.44206 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(53)239
b Fe(126.9)476 -2706 y Fd(I)395 -2507 y Fe(Io)r(dine)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 1 0.6 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.6 1 0.6 setrgbcolor}def

 578.82544 -157.86115 moveto

 543.74652 -157.86115 lineto

 543.74652 -192.94008 lineto

 578.82544 -192.94008 lineto

 closepath

 543.74652 -192.94008 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 546.50722 -176.52142 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(85)303 b Fe(210)421 -2706 y Fd(A)l(t)357
-2507 y Fe(Astatine)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 578.8272 -192.94066 moveto

 543.74826 -192.94066 lineto

 543.74826 -228.01958 lineto

 578.8272 -228.01958 lineto

 closepath

 543.74826 -228.01958 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 546.50897 -211.60092 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(117)257
b Fe(292)396 -2714 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 396 -2714 a Fc(Uus)604 -2714 y
/show /tx@CharPathSavedShow load def
 604
-2714 a 604 -2714 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 604 -2714 a 272 -2515 a Fe(Ununseptium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 1 0.45 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 1 0.45 setrgbcolor}def

 613.89914 -17.54442 moveto

 578.82022 -17.54442 lineto

 578.82022 -52.62334 lineto

 613.89914 -52.62334 lineto

 closepath

 578.82022 -52.62334 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 581.58092 -36.2047 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(10)197 b Fe(20.180)406 -2706 y
Fd(Ne)410 -2507 y Fe(Neon)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 1 0.45 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 1 0.45 setrgbcolor}def

 613.901 17.53442 moveto

 578.82207 17.53442 lineto

 578.82207 -17.5445 lineto

 613.901 -17.5445 lineto

 closepath

 578.82207 -17.5445 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 581.58278 -1.12584 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(2)243
b Fe(4.0025)406 -2706 y Fd(He)378 -2507 y Fe(Helium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 1 0.45 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 1 0.45 setrgbcolor}def

 613.901 -52.62346 moveto

 578.82207 -52.62346 lineto

 578.82207 -87.70238 lineto

 613.901 -87.70238 lineto

 closepath

 578.82207 -87.70238 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 581.58278 -71.28372 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(18)197 b Fe(39.948)420 -2714 y
Fd(Ar)395 -2515 y Fe(Argon)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 1 0.45 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 1 0.45 setrgbcolor}def

 613.90285 -87.70262 moveto

 578.82393 -87.70262 lineto

 578.82393 -122.78154 lineto

 613.90285 -122.78154 lineto

 closepath

 578.82393 -122.78154 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 581.58464 -106.36288 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(36)280
b Fe(83.8)417 -2714 y Fd(Kr)359 -2515 y Fe(Krypton)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 1 0.45 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 1 0.45 setrgbcolor}def

 613.90472 -122.78188 moveto

 578.82579 -122.78188 lineto

 578.82579 -157.86081 lineto

 613.90472 -157.86081 lineto

 closepath

 578.82579 -157.86081 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 581.5865 -141.44215 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(54)197 b Fe(131.29)411 -2706 y
Fd(Xe)390 -2507 y Fe(Xenon)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 1 0.45 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.45 1 0.45 setrgbcolor}def

 613.90659 -157.86124 moveto

 578.82765 -157.86124 lineto

 578.82765 -192.94017 lineto

 613.90659 -192.94017 lineto

 closepath

 578.82765 -192.94017 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 581.58836 -176.52151 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(86)303
b Fe(222)409 -2706 y Fd(Rn)390 -2507 y Fe(Radon)240 -2714
y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 1 0.75 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.75 1 0.75 setrgbcolor}def

 613.90843 -192.94072 moveto

 578.8295 -192.94072 lineto

 578.8295 -228.01965 lineto

 613.90843 -228.01965 lineto

 closepath

 578.8295 -228.01965 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 581.59021 -211.601 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(118)257 b Fe(294)388 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 388 -2706
a Fc(Uuo)612 -2706 y
/show /tx@CharPathSavedShow load def
 612 -2706 a 612 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 612 -2706
a 287 -2507 a Fe(Ununo)r(ctium)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 -27.33322 -2.54047 ] concat

 pgfs



 0 setgray
 240 -2714
a Fb(1)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 -27.33322 -37.61952 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(2)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 -27.33322 -72.69868 ] concat

 pgfs



 0 setgray
 240 -2714
a Fb(3)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 -27.33322 -107.77794 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(4)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 -27.33322 -142.85732 ] concat

 pgfs



 0 setgray
 240 -2714
a Fb(5)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 -27.33322 -177.9368 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(6)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 -27.33322 -213.01639 ] concat

 pgfs



 0 setgray
 240 -2714
a Fb(7)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 -6.457 22.82202 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(1)46 b(IA)240 -2714
y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 27.51837 -12.25711 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(2)g(I)t(IA)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 61.49406 -82.41585 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(3)g(I)t(I)t(IA)
240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 96.35696 -82.41617 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(4)g(IVB)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 132.43881 -82.41649 ] concat

 pgfs



 0 setgray
 240 -2714
a Fb(5)g(VB)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 166.51582 -82.41681 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(6)g(VIB)240 -2714
y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 200.49174 -82.41713 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(7)g(VI)t(IB)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 234.46779 -82.41743 ] concat

 pgfs



 0 setgray
 240 -2714 a
Fb(8)g(VI)t(I)t(IB)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 269.54759 -82.41776 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(9)g(VI)t(I)t(IB)240
-2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 302.80623 -82.41808 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(10)g(VI)t(I)t(IB)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 342.51262 -82.4184 ] concat

 pgfs



 0 setgray
 240
-2714 a Fb(11)g(IB)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 376.4891 -82.41872 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(12)g(I)t(IB)240
-2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 410.47298 -12.26147 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(13)g(I)t(I)t(IA)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 445.64519 -12.26155 ] concat

 pgfs



 0 setgray
 240
-2714 a Fb(14)g(IV)-11 b(A)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 481.72816 -12.26166 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(15)46
b(V)-11 b(A)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 515.50272 -12.26175 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(16)46 b(VIA)240
-2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 549.47972 -12.26186 ] concat

 pgfs



 0 setgray
 240 -2714 a Fb(17)g(VI)t(IA)240 -2714 y


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 583.45872 22.81699 ] concat

 pgfs



 0 setgray
 240 -2714
a Fb(18)g(VI)t(I)t(IA)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 122.77809 -240.7721 moveto

 87.69916 -240.7721 lineto

 87.69916 -275.85101 lineto

 122.77809 -275.85101 lineto

 closepath

 87.69916 -275.85101 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 90.45987 -259.43236 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(57)197
b Fe(138.91)421 -2706 y Fd(La)304 -2507 y Fe(Lanthanum)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 157.85735 -240.77289 moveto

 122.77843 -240.77289 lineto

 122.77843 -275.85182 lineto

 157.85735 -275.85182 lineto

 closepath

 122.77843 -275.85182 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 125.53912 -259.43317 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(58)g Fe(140.12)413 -2706 y Fd(Ce)377
-2507 y Fe(Cerium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 192.93672 -240.7737 moveto

 157.85779 -240.7737 lineto

 157.85779 -275.85262 lineto

 192.93672 -275.85262 lineto

 closepath

 157.85779 -275.85262 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 160.6185 -259.43396 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(59)g Fe(140.91)422
-2714 y Fd(Pr)245 -2515 y Fe(Praseo)r(dymium)240 -2714
y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 228.01622 -240.7745 moveto

 192.93729 -240.7745 lineto

 192.93729 -275.85342 lineto

 228.01622 -275.85342 lineto

 closepath

 192.93729 -275.85342 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 195.698 -259.43477 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(60)g Fe(144.24)403 -2714 y Fd(Nd)292
-2515 y Fe(Neo)r(dymium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 263.09581 -240.7753 moveto

 228.01688 -240.7753 lineto

 228.01688 -275.85423 lineto

 263.09581 -275.85423 lineto

 closepath

 228.01688 -275.85423 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 230.77759 -259.43558 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(61)303
b Fe(145)387 -2706 y Fd(Pm)286 -2507 y Fe(Promethium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 298.17552 -240.7761 moveto

 263.09659 -240.7761 lineto

 263.09659 -275.85501 lineto

 298.17552 -275.85501 lineto

 closepath

 263.09659 -275.85501 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 265.8573 -259.43636 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(62)197 b Fe(150.36)394 -2706 y
Fd(Sm)327 -2507 y Fe(Sama)n(rium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 333.25533 -240.7769 moveto

 298.1764 -240.7769 lineto

 298.1764 -275.85582 lineto

 333.25533 -275.85582 lineto

 closepath

 298.1764 -275.85582 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 300.9371 -259.43716 ] concat

 pgfs



 0 setgray
 240 -2913
a Ff(63)g Fe(151.96)414 -2714 y Fd(Eu)333 -2515 y Fe(Europium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 368.33527 -240.7777 moveto

 333.25633 -240.7777 lineto

 333.25633 -275.85663 lineto

 368.33527 -275.85663 lineto

 closepath

 333.25633 -275.85663 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 336.01704 -259.43797 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(64)g Fe(157.25)407 -2706 y Fd(Gd)305
-2507 y Fe(Gadolinium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 403.4153 -240.7785 moveto

 368.33638 -240.7785 lineto

 368.33638 -275.85744 lineto

 403.4153 -275.85744 lineto

 closepath

 368.33638 -275.85744 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 371.09708 -259.43878 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(65)g
Fe(158.93)407 -2706 y Fd(Tb)357 -2507 y Fe(T)-7 b(erbium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 438.49545 -240.77931 moveto

 403.41652 -240.77931 lineto

 403.41652 -275.85823 lineto

 438.49545 -275.85823 lineto

 closepath

 403.41652 -275.85823 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 406.17723 -259.43958 ] concat

 pgfs



 0 setgray
 240 -2913 a Ff(66)197 b Fe(162.50)406 -2714 y
Fd(Dy)300 -2515 y Fe(Dysp)n(rosium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 473.5757 -240.7801 moveto

 438.49677 -240.7801 lineto

 438.49677 -275.85902 lineto

 473.5757 -275.85902 lineto

 closepath

 438.49677 -275.85902 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 441.25748 -259.44037 ] concat

 pgfs



 0 setgray
 240 -2905
a Ff(67)g Fe(164.93)404 -2706 y Fd(Ho)343 -2507 y Fe(Holmium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 508.65608 -240.7809 moveto

 473.57715 -240.7809 lineto

 473.57715 -275.85983 lineto

 508.65608 -275.85983 lineto

 closepath

 473.57715 -275.85983 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 476.33786 -259.44118 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(68)g Fe(167.26)426 -2706 y Fd(Er)375
-2507 y Fe(Erbium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 543.73656 -240.7817 moveto

 508.65762 -240.7817 lineto

 508.65762 -275.86063 lineto

 543.73656 -275.86063 lineto

 closepath

 508.65762 -275.86063 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 511.41833 -259.44197 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(69)g Fe(168.93)385
-2706 y Fd(Tm)355 -2507 y Fe(Thulium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 578.81714 -240.7825 moveto

 543.73822 -240.7825 lineto

 543.73822 -275.86143 lineto

 578.81714 -275.86143 lineto

 closepath

 543.73822 -275.86143 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 546.49892 -259.44278 ] concat

 pgfs



 0 setgray
 240
-2905 a Ff(70)g Fe(173.04)407 -2706 y Fd(Yb)324 -2507
y Fe(Ytterbium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 613.89784 -240.78331 moveto

 578.81891 -240.78331 lineto

 578.81891 -275.86224 lineto

 613.89784 -275.86224 lineto

 closepath

 578.81891 -275.86224 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 581.57962 -259.44359 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(71)g Fe(174.97)418
-2706 y Fd(Lu)343 -2507 y Fe(Lutetium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 122.77841 -288.6078 moveto

 87.69948 -288.6078 lineto

 87.69948 -323.68674 lineto

 122.77841 -323.68674 lineto

 closepath

 87.69948 -323.68674 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 90.46019 -307.26808 ] concat

 pgfs



 0 setgray
 240
-2905 a Ff(89)303 b Fe(227)412 -2706 y Fd(Ac)343 -2507
y Fe(Actinium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 157.85767 -288.60875 moveto

 122.77875 -288.60875 lineto

 122.77875 -323.68768 lineto

 157.85767 -323.68768 lineto

 closepath

 122.77875 -323.68768 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 125.53944 -307.26903 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(90)197 b Fe(232.04)407
-2706 y Fd(Th)352 -2507 y Fe(Tho)n(rium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 192.93704 -288.6097 moveto

 157.85811 -288.6097 lineto

 157.85811 -323.68861 lineto

 192.93704 -323.68861 lineto

 closepath

 157.85811 -323.68861 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 160.61882 -307.26996 ] concat

 pgfs



 0 setgray
 240
-2905 a Ff(91)g Fe(231.04)414 -2706 y Fd(P)l(a)275 -2507
y Fe(Protactinium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 228.01653 -288.61063 moveto

 192.93759 -288.61063 lineto

 192.93759 -323.68956 lineto

 228.01653 -323.68956 lineto

 closepath

 192.93759 -323.68956 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 195.6983 -307.2709 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(92)g Fe(238.03)445
-2706 y Fd(U)352 -2507 y Fe(Uranium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 263.09612 -288.6116 moveto

 228.01718 -288.6116 lineto

 228.01718 -323.69052 lineto

 263.09612 -323.69052 lineto

 closepath

 228.01718 -323.69052 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 230.7779 -307.27187 ] concat

 pgfs



 0 setgray
 240 -2913
a Ff(93)303 b Fe(237)419 -2714 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 419 -2714 a Fc(Np)581
-2714 y
/show /tx@CharPathSavedShow load def
 581 -2714 a 581 -2714 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 581 -2714 a 309 -2515
a Fe(Neptunium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 298.17583 -288.61255 moveto

 263.0969 -288.61255 lineto

 263.0969 -323.69148 lineto

 298.17583 -323.69148 lineto

 closepath

 263.0969 -323.69148 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 265.8576 -307.27283 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(94)g Fe(244)425
-2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 425 -2706 a Fc(Pu)576 -2706 y
/show /tx@CharPathSavedShow load def
 576 -2706 a 576
-2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 576 -2706 a 321 -2507 a Fe(Plutonium)240 -2714
y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 333.25563 -288.61351 moveto

 298.1767 -288.61351 lineto

 298.1767 -323.69243 lineto

 333.25563 -323.69243 lineto

 closepath

 298.1767 -323.69243 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 300.93741 -307.27379 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(95)g Fe(243)404 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 404 -2706 a
Fc(Am)596 -2706 y
/show /tx@CharPathSavedShow load def
 596 -2706 a 596 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 596 -2706 a
314 -2507 a Fe(Americium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 368.33556 -288.61446 moveto

 333.25662 -288.61446 lineto

 333.25662 -323.69339 lineto

 368.33556 -323.69339 lineto

 closepath

 333.25662 -323.69339 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 336.01733 -307.27473 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(96)g
Fe(247)406 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 406 -2706 a Fc(Cm)594 -2706 y
/show /tx@CharPathSavedShow load def
 594
-2706 a 594 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 594 -2706 a 374 -2507 a Fe(Curium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 403.41559 -288.61542 moveto

 368.33665 -288.61542 lineto

 368.33665 -323.69435 lineto

 403.41559 -323.69435 lineto

 closepath

 368.33665 -323.69435 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 371.09737 -307.2757 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(97)g Fe(247)425 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 425 -2706
a Fc(Bk)576 -2706 y
/show /tx@CharPathSavedShow load def
 576 -2706 a 576 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 576 -2706
a 328 -2507 a Fe(Berk)n(elium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 438.49574 -288.61638 moveto

 403.41681 -288.61638 lineto

 403.41681 -323.69531 lineto

 438.49574 -323.69531 lineto

 closepath

 403.41681 -323.69531 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 406.17752 -307.27666 ] concat

 pgfs



 0 setgray
 240 -2905 a
Ff(98)g Fe(251)438 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 438 -2706 a Fc(Cf)562 -2706
y
/show /tx@CharPathSavedShow load def
 562 -2706 a 562 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 562 -2706 a 302 -2507 a Fe(Califo)n(rnium)240
-2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 473.57599 -288.61734 moveto

 438.49706 -288.61734 lineto

 438.49706 -323.69626 lineto

 473.57599 -323.69626 lineto

 closepath

 438.49706 -323.69626 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 441.25777 -307.27762 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(99)g Fe(252)437 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 437 -2706
a Fc(Es)564 -2706 y
/show /tx@CharPathSavedShow load def
 564 -2706 a 564 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 564 -2706
a 299 -2507 a Fe(Einsteinium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 508.65636 -288.61829 moveto

 473.57742 -288.61829 lineto

 473.57742 -323.69722 lineto

 508.65636 -323.69722 lineto

 closepath

 473.57742 -323.69722 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 476.33813 -307.27856 ] concat

 pgfs



 0 setgray
 240 -2905 a
Ff(100)257 b Fe(257)412 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 412 -2706 a Fc(Fm)588
-2706 y
/show /tx@CharPathSavedShow load def
 588 -2706 a 588 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 588 -2706 a 348 -2507
a Fe(F)n(ermium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 543.73683 -288.61925 moveto

 508.6579 -288.61925 lineto

 508.6579 -323.69818 lineto

 543.73683 -323.69818 lineto

 closepath

 508.6579 -323.69818 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 511.41861 -307.27953 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(101)g Fe(258)408
-2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 408 -2706 a Fc(Md)592 -2706 y
/show /tx@CharPathSavedShow load def
 592 -2706 a 592
-2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 592 -2706 a 272 -2507 a Fe(Mendelevium)240 -2714
y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 578.81741 -288.62021 moveto

 543.7385 -288.62021 lineto

 543.7385 -323.69914 lineto

 578.81741 -323.69914 lineto

 closepath

 543.7385 -323.69914 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 546.49919 -307.28049 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(102)g Fe(259)420 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 420 -2706 a
Fc(No)580 -2706 y
/show /tx@CharPathSavedShow load def
 580 -2706 a 580 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 580 -2706 a
335 -2507 a Fe(Nob)r(elium)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 613.89812 -288.62117 moveto

 578.81918 -288.62117 lineto

 578.81918 -323.7001 lineto

 613.89812 -323.7001 lineto

 closepath

 578.81918 -323.7001 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 581.5799 -307.28145 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(103)g
Fe(262)443 -2706 y
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 443 -2706 a Fc(Lr)557 -2706 y
/show /tx@CharPathSavedShow load def
 557
-2706 a 557 -2706 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 557 -2706 a 294 -2507 a Fe(La)n(wrencium)240
-2714 y


 pgfr

 restore

 restore

 52.52963 -157.76753 moveto

 87.788 -157.76753 moveto

 52.52963 -193.0259 moveto

 87.788 -193.0259 moveto

 pgfstr

 save

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 52.52963 -157.76753 moveto

 87.60977 -240.68317 lineto

 pgfstr

 restore

 restore

 save

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 87.788 -157.76753 moveto

 613.98941 -240.6944 lineto

 pgfstr

 restore

 restore

 save

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 52.52963 -193.0259 moveto

 87.60977 -275.94153 lineto

 pgfstr

 restore

 restore

 save

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 87.788 -193.0259 moveto

 613.98941 -275.95274 lineto

 pgfstr

 restore

 restore

 52.52985 -192.84712 moveto

 87.78821 -192.84712 moveto

 52.52985 -228.1055 moveto

 87.78821 -228.1055 moveto

 pgfstr

 save

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 52.52985 -192.84712 moveto

 87.61008 -288.51904 lineto

 pgfstr

 restore

 restore

 save

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 87.78821 -192.84712 moveto

 613.98969 -288.5324 lineto

 pgfstr

 restore

 restore

 save

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 52.52985 -228.1055 moveto

 87.61008 -323.7774 lineto

 pgfstr

 restore

 restore

 save

 save

 [ 0.3985 1.99255 ] 0.0 setdash

 87.78821 -228.1055 moveto

 613.98969 -323.79076 lineto

 pgfstr

 restore

 restore

 save
 0 TeXcolorgray
 /pgffc{0.45 0.45 1 setrgbcolor}def

 -13.14594 -240.68317 moveto

 -13.14594 -240.68317 moveto

 -13.14594 -236.19995 lineto

 -8.66272 -236.19995 lineto

 -8.66272 -240.68317 lineto

 closepath

 -8.66272 -236.19995 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 save

 save

 [0.45 0.0 0.0 0.45 -7.07883 -239.68687 ] concat

 pgfs



 0 setgray
 240 -2714 a Fe(Alk)n(ali)27 b(Metal)240
-2714 y


 pgfr

 restore

 restore
 Black
 restore

 save
 0 TeXcolorgray
 /pgffc{0.6 0.6 1 setrgbcolor}def

 -13.14594 -247.408 moveto

 -13.14594 -247.408 moveto

 -13.14594 -242.92477 lineto

 -8.66272 -242.92477 lineto

 -8.66272 -247.408 lineto

 closepath

 -8.66272 -242.92477 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 save

 save

 [0.45 0.0 0.0 0.45 -7.07883 -246.4117 ] concat

 pgfs



 0 setgray
 240 -2714 a Fe(Alk)n(aline)g(Ea)n(rth)g
(Metal)240 -2714 y


 pgfr

 restore

 restore
 Black
 restore

 save
 0 TeXcolorgray
 /pgffc{0.75 0.75 1 setrgbcolor}def

 -13.14594 -254.13283 moveto

 -13.14594 -254.13283 moveto

 -13.14594 -249.64961 lineto

 -8.66272 -249.64961 lineto

 -8.66272 -254.13283 lineto

 closepath

 -8.66272 -249.64961 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 save

 save

 [0.45 0.0 0.0 0.45 -7.07883 -253.13654 ] concat

 pgfs



 0 setgray
 240 -2714 a Fe(Metal)240
-2714 y


 pgfr

 restore

 restore
 Black
 restore

 save
 0 TeXcolorgray
 /pgffc{1 0.875 0.75 setrgbcolor}def

 -13.14594 -260.85767 moveto

 -13.14594 -260.85767 moveto

 -13.14594 -256.37444 lineto

 -8.66272 -256.37444 lineto

 -8.66272 -260.85767 lineto

 closepath

 -8.66272 -256.37444 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 save

 save

 [0.45 0.0 0.0 0.45 -7.07883 -259.86136 ] concat

 pgfs



 0 setgray
 240 -2714 a Fe(Metalloid)240
-2714 y


 pgfr

 restore

 restore
 Black
 restore

 save
 0 TeXcolorgray
 /pgffc{0.75 1 0.75 setrgbcolor}def

 -13.14594 -267.5825 moveto

 -13.14594 -267.5825 moveto

 -13.14594 -263.09927 lineto

 -8.66272 -263.09927 lineto

 -8.66272 -267.5825 lineto

 closepath

 -8.66272 -263.09927 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 save

 save

 [0.45 0.0 0.0 0.45 -7.07883 -266.5862 ] concat

 pgfs



 0 setgray
 240 -2714 a Fe(Non-metal)240
-2714 y


 pgfr

 restore

 restore
 Black
 restore

 save
 0 TeXcolorgray
 /pgffc{0.6 1 0.6 setrgbcolor}def

 -13.14594 -274.30733 moveto

 -13.14594 -274.30733 moveto

 -13.14594 -269.82411 lineto

 -8.66272 -269.82411 lineto

 -8.66272 -274.30733 lineto

 closepath

 -8.66272 -269.82411 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 save

 save

 [0.45 0.0 0.0 0.45 -7.07883 -272.87517 ] concat

 pgfs



 0 setgray
 240 -2714 a Fe(Halogen)240
-2714 y


 pgfr

 restore

 restore
 Black
 restore

 save
 0 TeXcolorgray
 /pgffc{0.45 1 0.45 setrgbcolor}def

 -13.14594 -281.03217 moveto

 -13.14594 -281.03217 moveto

 -13.14594 -276.54895 lineto

 -8.66272 -276.54895 lineto

 -8.66272 -281.03217 lineto

 closepath

 -8.66272 -276.54895 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 save

 save

 [0.45 0.0 0.0 0.45 -7.07883 -280.03587 ] concat

 pgfs



 0 setgray
 240 -2714 a Fe(Noble)g(Gas)240
-2714 y


 pgfr

 restore

 restore
 Black
 restore

 save
 0 TeXcolorgray
 /pgffc{0.9375 0.75 0.8125 setrgbcolor}def

 -13.14594 -287.757 moveto

 -13.14594 -287.757 moveto

 -13.14594 -283.27377 lineto

 -8.66272 -283.27377 lineto

 -8.66272 -287.757 lineto

 closepath

 -8.66272 -283.27377 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 save

 save

 [0.45 0.0 0.0 0.45 -7.07883 -286.32483 ] concat

 pgfs



 0 setgray
 240 -2714 a Fe(Lanthanide/Actinide)240
-2714 y


 pgfr

 restore

 restore
 Black
 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 setgray}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 setgray}def

 22.32639 -290.39203 moveto

 -12.75253 -290.39203 lineto

 -12.75253 -325.47096 lineto

 22.32639 -325.47096 lineto

 closepath

 -12.75253 -325.47096 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 -9.99182 -309.0523 ] concat

 pgfs



 0 setgray
 240 -2905 a Ff(Z)294 b Fe(mass)258 -2706
y Fd(Symb)t(ol)399 -2507 y Fe(Name)240 -2714 y


 pgfr

 restore

 restore

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 setgray}def

 save

 /pgfsc{0 setgray}def

 /pgffc{0 0 0.15 0 setcmykcolor}def

 /pgffc{1 setgray}def

 61.88853 -290.393 moveto

 26.80962 -290.393 lineto

 26.80962 -325.47192 lineto

 61.88853 -325.47192 lineto

 closepath

 26.80962 -325.47192 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [0.45 0.0 0.0 0.45 29.57031 -309.05327 ] concat

 pgfs



 0 setgray
 240 -2735
a
/tx@CharPathSavedShow /show load def /show { dup gsave newpath 0 0
moveto true charpath pathbbox grestore 3 -1 roll eq 3 1 roll eq and
{ tx@CharPathSavedShow } { true charpath } ifelse } def
 240 -2735 a Fc(man-made)812 -2735 y
/show /tx@CharPathSavedShow load def
 812 -2735 a 812
-2735 a
tx@Dict begin gsave STV /ArrowA { moveto } def /ArrowB { } def /ArrowInside
{ } def  0.2 SLW 0  setgray  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.2 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore grestore CP newpath moveto
 end
 812 -2735 a 240 -2714 a


 pgfr

 restore

 restore

 save

 save

 [0.45 0.0 0.0 0.45 113.18997 -2.78856 ] concat

 pgfs



 0 setgray
 240 -2714 a Fa(\(Mendeleev's\))75
b(P)-6 b(erio)6 b(dic)74 b(T)-19 b(able)76 b(of)g(Chemical)g(Elements)
240 -2714 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
